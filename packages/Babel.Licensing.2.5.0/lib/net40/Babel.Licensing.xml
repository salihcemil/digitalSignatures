<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Babel.Licensing</name>
    </assembly>
    <members>
        <member name="T:Babel.Licensing.LicenseFileFoundEventArgs">
            <summary>
                Additional information for license file found events.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseFileFoundEventArgs.Skip">
            <summary>
                 Gets or sets a value indicating whether the skip the license file.
             </summary>
            <value>
                 true if skip the license file, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseFileFoundEventArgs.LicenseFilePath">
            <summary>
                 Gets the full pathname of the license file.
             </summary>
            <value>
                 The full pathname of the license file.
             </value>
        </member>
        <member name="M:Babel.Licensing.LicenseFileFoundEventArgs.#ctor(System.String)">
            <summary>
                 Generate a new instance of <see cref="T:Babel.Licensing.LicenseFileFoundEventArgs" /> class.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="licenseFilePath">  The full path of the license file. </param>
        </member>
        <member name="T:Babel.Licensing.BabelFileLicenseProvider">
            <summary>
                Represents an license provider used to manage licenses stored in a file on disk. 
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelFileLicenseProvider.SearchDirectories">
            <summary>
                 Gets or sets the directories where to search for a license file.
             </summary>
            <value>
                 The array of search directories.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelFileLicenseProvider.LicenseFile">
            <summary>
                 Gets or sets the license file full path.
             </summary>
            <value>
                 The license file full path.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelFileLicenseProvider.EnvironmentVariable">
            <summary>
                 Gets or sets the environment variable name that contains the license file path.
             </summary>
            <value>
                 The environment variable name.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelFileLicenseProvider.LicenseFactory">
            <summary>
                 Gets or sets the <see cref="T:Babel.Licensing.ILicenseFactory" />.
             </summary>
            <value>
                 The license factory.
             </value>
        </member>
        <member name="E:Babel.Licensing.BabelFileLicenseProvider.LicenseFileFound">
            <summary>
                Event queue for all listeners interested in LicenseFileFound events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelFileLicenseProvider.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.BabelFileLicenseProvider" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelFileLicenseProvider.#ctor(Babel.Licensing.ILicenseFactory)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelFileLicenseProvider" />
                 class.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="factory">  The license factory. </param>
        </member>
        <member name="M:Babel.Licensing.BabelFileLicenseProvider.GetLicense(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 When overridden in a derived class, gets a license for an instance or type of component, when given a context
                 and whether the denial of a license throws an exception.
             </summary>
            <param name="context">
                 A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                 A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance"> An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" />
                 .
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelFileLicenseProvider.ValidateLicenseKey(System.String,Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the license key.
             </summary>
            <param name="licenseKey">   The license key. </param>
            <param name="context">
                  A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                  A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance">     An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelFileLicenseProvider.OnLicenseFileFound(Babel.Licensing.LicenseFileFoundEventArgs)">
            <summary>
                 Raises the license file found event.
             </summary>
            <param name="args"> Event information to send to registered event handlers. </param>
        </member>
        <member name="T:Babel.Licensing.BabelLicense">
            <summary>
                Provides the abstract base class for implementing a license.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Id">
            <summary>
                 Gets or sets the license identifier.
             </summary>
            <value>
                 The license identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Type">
            <summary>
                 Gets or sets the license type.
             </summary>
            <value>
                 The license type.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.IssueDate">
            <summary>
                 Gets, sets the license issue date.
             </summary>
            <value>
                 The license issue date.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.ExpireDate">
            <summary>
                 Gets, sets the license expire date.
             </summary>
            <value>
                 The license expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.SupportExpireDate">
            <summary>
                 Gets, sets the license expire date.
             </summary>
            <value>
                 The license expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.LicenseKey">
            <summary>
                 Gets the license key granted to this component.
             </summary>
            <value>
                 A license key granted to this component.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Licensee">
            <summary>
                 Gets, sets the <see cref="T:Babel.Licensing.Licensee" /> information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Licensee" /> object or a null reference
                 (Nothing in Visual Basic) if no licensee information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Product">
            <summary>
                 Gets, sets the licensed product information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Product" /> object or a null reference
                 (Nothing in Visual Basic) if no product information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Assemblies">
            <summary>
                 Gets the licensed assemblies collection.
             </summary>
            <value>
                 The licensed assemblies collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Components">
            <summary>
                 Gets the licensed components collection.
             </summary>
            <value>
                 The licensed components collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Features">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Feature" /> collection.
             </summary>
            <value>
                 The license feature collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Fields">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Field" /> collection.
             </summary>
            <value>
                 The license field collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicense.Restrictions">
            <summary>
                 Gets the collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </summary>
            <value>
                 The collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelLicense.#ctor">
            <summary>
                Specialized default constructor for use only by derived class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelLicense.Finalize">
            <summary>
                <see cref="T:Babel.Licensing.BabelLicense" /> finaliser.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelLicense.Dispose">
            <summary>
                Releases the unmanaged resources used by the Babel.Licensing.BabelLicense.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelLicense.Dispose(System.Boolean)">
            <summary>
                 Releases the unmanaged resources used by the Babel.Licensing.BabelLicense and optionally releases the managed
                 resources.
             </summary>
            <param name="disposing">
                 true to release both managed and unmanaged resources; false to release only unmanaged resources.
             </param>
        </member>
        <member name="T:Babel.Licensing.BabelLicenseContext">
            <summary>
                An abstract base class for license context.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseContext.FallbackContext">
            <summary>
                 Gets or sets a fallback license context. 
                 The fallback context will be used in search for license services when the required service is not found in the present context.
             </summary>
            <value>
                 The fallback context.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseContext.Settings">
            <summary>
                 Gets or sets license context options.
             </summary>
            <value>
                 The license context settings.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseContext.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseContext.ContextName">
            <summary>
                 Gets the name of the context.
             </summary>
            <value>
                 The name of the context.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseContext.LoadLicenseKey(System.Type)">
            <summary>
                 Loads license key.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="type"> The type. </param>
            <returns>
                 The license key.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseContext.SaveLicenseKey(System.Type,System.String)">
            <summary>
                 Saves a license key.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="type"> The type. </param>
            <param name="key">  The key. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseContext.GetService(System.Type)">
            <summary>
                 Provides a license service for the given type. 
             </summary>
            <param name="serviceType">  Type of the service. </param>
            <returns>
                 The service.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseContext.IsContextValid(System.Type)">
            <summary>
                 Query if a context is valid for the given type.
                 If the context is not valid the license will be reloaded inside the context.
             </summary>
            <param name="type"> The type. </param>
            <returns>
                 true if the context is valid, false if not.
             </returns>
        </member>
        <member name="T:Babel.Licensing.BabelMultipleLicenseException">
            <summary>
                Exception for signaling multiple license errors.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelMultipleLicenseException.ValidationResults">
            <summary>
                 Gets the composite license validation results.
             </summary>
            <value>
                 The composite license validation results.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelMultipleLicenseException.#ctor(System.Collections.Generic.IEnumerable{Babel.Licensing.LicenseValidationResult})">
            <summary>
                 Constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="results">  The collection of license validation results. </param>
        </member>
        <member name="T:Babel.Licensing.BabelLicenseException">
            <summary>
                Represents the exception thrown for license errors.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseException.Status">
            <summary>
                 Gets the license status that generates this exception.
             </summary>
            <value>
                 The license status value that generates this exception.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseException.LicensedType">
            <summary>
                 Gets the type of the component that was not granted a license.
             </summary>
            <value>
                 A <see cref="T:System.Type" /> that represents the type of component that was not granted a license.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor">
            <summary>
                Initializes a new instance of the Babel.Licensing.BabelLicenseException class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.String)">
            <summary>
                 Initializes a new instance of the System.Exception class with a specified
                 error message.
             </summary>
            <param name="message">  The message that describes the error. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.String,System.Exception)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class with a specified
                 error message and a reference to the inner exception that is the cause of this exception.
             </summary>
            <param name="message">          The error message that explains the reason for the exception. </param>
            <param name="innerException">   The exception that is the cause of the current exception, or a null reference
                                             (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(Babel.Licensing.LicenseStatus)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class with a specified
                 <see cref="T:Babel.Licensing.LicenseStatus" /> value.
             </summary>
            <param name="status">   The license status that generated this error. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(Babel.Licensing.LicenseStatus,System.Exception)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class with a specified
                 <see cref="T:Babel.Licensing.LicenseStatus" /> value and a reference to the inner exception that is the cause 
                 of this exception.
             </summary>
            <param name="status">           The license status that generated this error. </param>
            <param name="innerException">   The exception that is the cause of the current exception, or a null reference
                                             (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.Type)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class for the type of component that was denied a license.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of component that was not granted a license. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.Type,System.Object)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class for the type and the instance of the component that was denied a license.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of component that was not granted a license. </param>
            <param name="instance"> The instance of the component that was not granted a license. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.Type,System.Object,System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class for the type and the instance of the component 
             that was denied a license, along with a message to display.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of component that was not granted a license. </param>
            <param name="instance"> The instance of the component that was not granted a license. </param>
            <param name="message">  The exception message to display. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
            <summary>
             Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class for the type and the instance of the component 
             that was denied a license, along with a message to display.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of component that was not granted a license. </param>
            <param name="instance"> The instance of the component that was not granted a license. </param>
            <param name="message">  The exception message to display. </param>
            <param name="innerException"> An <see cref="T:System.Exception" /> that represents the original exception. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.BabelLicenseException" /> class with serialized data.
             </summary>
            <param name="info">     The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">  The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                 When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
             </summary>
            <param name="info">
                 The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the
                 serialized object data about the exception being thrown.
             </param>
            <param name="context">
                 The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains
                 contextual information about the source or destination.
             </param>
        </member>
        <member name="T:Babel.Licensing.BabelLicenseManager">
            <summary>
                Provides properties and methods to manage a ILicenseProvider. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelLicenseManager.CurrentContext">
            <summary>
                 Gets the current <see cref="T:Babel.Licensing.ILicenseContext" /> , which specifies when you can use the licensed object.
             </summary>
            <value>
                 A <see cref="T:Babel.Licensing.ILicenseContext" /> that specifies when you can use the licensed object.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.RegisterLicenseProvider(System.Type,Babel.Licensing.ILicenseProvider)">
            <summary>
                 Registers the license provider.
             </summary>
            <param name="type">
                 A <see cref="T:System.Type" />
                 that represents the type of object that requests the license.
             </param>
            <param name="provider"> The license provider instance. </param>
            <example>
                <code source="Examples\BabelLicenseManager.RegisterLicenseProvider.cs" language="cs" />
                <code source="Examples\BabelLicenseManager.RegisterLicenseProvider.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.Validate(System.Type)">
            <summary>
                 Determines whether a license can be granted for the specified type.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of object that requests the license. </param>
            <exception cref="T:Babel.Licensing.BabelLicenseException"> A License cannot be granted. </exception>
            <example>
                <code source="Examples\BabelLicenseManager.Validate.cs" language="cs" />
                <code source="Examples\BabelLicenseManager.Validate.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.Validate(System.Type,System.Object)">
            <summary>
                 Determines whether a license can be granted for the instance of the specified type.
             </summary>
            <exception cref="T:Babel.Licensing.BabelLicenseException"> The type is licensed, but a License cannot be granted. </exception>
            <param name="type">     A <see cref="T:System.Type" /> that represents the type of object that requests the license. </param>
            <param name="instance"> An object of the specified type or a type derived from the specified type. </param>
            <returns>
                 An valid license.
             </returns>
            <example>
                <code source="Examples\BabelLicenseManager.Validate.cs" language="cs" />
                <code source="Examples\BabelLicenseManager.Validate.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.IsLicensed(System.Type)">
            <summary>
                 Returns whether the given type has a valid license.
             </summary>
            <param name="type"> The <see cref="T:System.Type" /> to find a valid license for. </param>
            <returns>
                 true if the given type is licensed; otherwise, false.
             </returns>
            <example>
                <code source="Examples\BabelLicenseManager.IsLicensed.cs" language="cs" />
                <code source="Examples\BabelLicenseManager.IsLicensed.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.IsValid(System.Type)">
            <summary>
                 Determines whether a valid license can be granted for the specified type.
             </summary>
            <param name="type"> A <see cref="T:System.Type" /> that represents the type of object that requests the license. </param>
            <returns>
                 true if a valid license can be granted; otherwise, false.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseManager.IsValid(System.Type,System.Object,Babel.Licensing.ILicense@)">
            <summary>
                 Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid License.
             </summary>
            <param name="type">     A <see cref="T:System.Type" /> that represents the type of object that requests the license. </param>
            <param name="instance"> An object of the specified type or a type derived from the specified type. </param>
            <param name="license">  A <see cref="T:Babel.Licensing.ILicense" /> that is a valid license, or null if a valid license cannot be granted. </param>
            <returns>
                 true if a valid license can be granted; otherwise, false.
             </returns>
        </member>
        <member name="T:Babel.Licensing.BabelLicenseProvider">
            <summary>
                Provides the abstract base class for implementing a <see cref="T:System.ComponentModel.LicenseProvider" /> 
                that is also compatible with <see cref="T:Babel.Licensing.BabelLicenseManager" /></summary>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseProvider.GetLicense(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 When overridden in a derived class, gets a license for an instance or type of component, when given a context
                 and whether the denial of a license throws an exception.
             </summary>
            <param name="context">
                 A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                 A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance"> An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" />.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
                 When overridden in a derived class, gets a license for an instance or type of component, when given a context
                 and whether the denial of a license throws an exception.
             </summary>
            <exception cref="T:System.ComponentModel.LicenseException"> Thrown when a License error condition occurs. </exception>
            <param name="context">
                 A <see cref="T:System.ComponentModel.LicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                 A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance">         An object that is requesting the license. </param>
            <param name="allowExceptions">
                 true if a <see cref="T:System.ComponentModel.LicenseException" />
                  should be thrown when the component cannot be granted a license; otherwise, false.
             </param>
            <returns>
                 A valid <see cref="T:System.ComponentModel.License" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.BabelRegistryLicenseProvider">
            <summary>
                Represents an license provider used to manage licenses stored in the Windows registry.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelRegistryLicenseProvider.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.BabelRegistryLicenseProvider" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelRegistryLicenseProvider.GetLicense(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 When overridden in a derived class, gets a license for an instance or type of component, when given a context
                 and whether the denial of a license throws an exception.
             </summary>
            <param name="context">
                 A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                 A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance"> An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" />
                 .
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelRegistryLicenseProvider.ValidateLicenseKey(System.String,Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the license key.
             </summary>
            <param name="licenseKey">   The license key. </param>
            <param name="context">
                 A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                 A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance">     An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelRegistryLicenseProvider.GetRegistryKey(System.Type,System.Object)">
            <summary>
                 Gets the license string stored into the registry key associated with the given type and object instance.
                 If not overridden, the license string is retrieved from the registry key built
                 using the information stored within the <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> and
                 <see cref="T:System.Reflection.AssemblyProductAttribute" /> attributes for the given type 
                 according the following rule:
                 HKEY_CURRENT_USER\SOFTWARE\AssmeblyCompanyAttribute\AssemblyProductAttribute\LicenseKey
             </summary>
            <param name="type">
                 A <see cref="T:System.Type" /> that represents the component requesting the license.
             </param>
            <param name="instance"> 
                 An object that is requesting the license. 
             </param>
            <returns>
                 The license registry key.
             </returns>
        </member>
        <member name="T:Babel.Licensing.CreateCustomRestrictionEventArgs">
            <summary>
                Additional information for create CreateCustomRestriction event.
            </summary>
        </member>
        <member name="P:Babel.Licensing.CreateCustomRestrictionEventArgs.RestrictionName">
            <summary>
                 Gets the name of the restriction to create.
             </summary>
            <value>
                 The name of the restriction to create.
             </value>
        </member>
        <member name="P:Babel.Licensing.CreateCustomRestrictionEventArgs.Restriction">
            <summary>
                 Sets the restriction object.
             </summary>
            <value>
                 The restriction object created.
             </value>
        </member>
        <member name="M:Babel.Licensing.CreateCustomRestrictionEventArgs.#ctor(System.String)">
            <summary>
                 Generate a new instance of <see cref="T:Babel.Licensing.CreateCustomRestrictionEventArgs" /> class.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="restrictionName">  The name of the restriction to create. </param>
        </member>
        <member name="T:Babel.Licensing.CreateCustomSignatureProviderEventArgs">
            <summary>
                Additional information for create CreateCustomSignatureProvider event.
            </summary>
        </member>
        <member name="P:Babel.Licensing.CreateCustomSignatureProviderEventArgs.AlgorithmName">
            <summary>
                 Gets the algorithm name of the <see cref="T:Babel.Licensing.ISignatureProvider" /> to create.
             </summary>
            <value>
                 The algorithm name of the signature provider to create.
             </value>
        </member>
        <member name="P:Babel.Licensing.CreateCustomSignatureProviderEventArgs.SignatureProvider">
            <summary>
                 Sets the signature provider object.
             </summary>
            <value>
                 The signature provider object created.
             </value>
        </member>
        <member name="M:Babel.Licensing.CreateCustomSignatureProviderEventArgs.#ctor(System.String)">
            <summary>
                 Generate a new instance of <see cref="T:Babel.Licensing.CreateCustomSignatureProviderEventArgs" /> class.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="algorithmName">  The algorithm name of the <see cref="T:Babel.Licensing.ISignatureProvider" /> to create. </param>
        </member>
        <member name="T:Babel.Licensing.ECDsaKeySize">
            <summary>
                Values that represent ECDSA key sizes.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ECDsaKeySize.KeySize112bit">
            <summary>
                Represents 112 bit key size.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ECDsaKeySize.KeySize192bit">
            <summary>
                Represents 192 bit key size.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ECDsaKeySize.KeySize256bit">
            <summary>
                Represents 256 bit key size.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ECDsaKeySize.KeySize384bit">
            <summary>
                Represents 384 bit key size.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ECDsaKeySize.KeySize521bit">
            <summary>
                Represents 512 bit key size.
            </summary>
        </member>
        <member name="T:Babel.Licensing.ECDsaSignature">
            <summary>
                Creates and verifies digital signature using the 
                Elliptic Curve Digital Signature Algorithm (ECDSA).
                This class cannot be inherited.
            </summary>
            <seealso cref="T:Babel.Licensing.RSASignature" />
            <seealso cref="T:Babel.Licensing.XmlDigitalSignature" />
            <example>
                <code source="Examples\ECDsaSignature.Constructor1.cs" language="cs" />
                <code source="Examples\ECDsaSignature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.FromKeys(System.String,System.String)">
            <summary>
                 Creates an <see cref="T:Babel.Licensing.ECDsaSignature" /> object from the given public and private keys.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="publicKey">    The public key Base32 encoded string. </param>
            <param name="privateKey">   An optional private key Base32 encoded string. </param>
            <returns>
                 The ECDsaSignature with the given keys.
             </returns>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.KeySize">
            <summary>
                 Gets ECDSA algorithm key size.
             </summary>
            <value>
                 A <see cref="T:Babel.Licensing.ECDsaKeySize" /> value representing the key size.
             </value>
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.PublicKey">
            <summary>
                 Gets the public key as an encoded Base32 string.
             </summary>
            <value>
                 The public key Base32 encoded string.
             </value>
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.PrivateKey">
            <summary>
                 Gets the private key as an encoded Base32 string.
             </summary>
            <value>
                 The private key Base32 encoded string.
             </value>
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.GenerateKeyInfo">
            <summary>
                 Gets or sets a value indicating whether the generate key information.
             </summary>
            <value>
                 true if generate key information, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.#ctor">
            <summary>
                Create a new instance of <see cref="T:Babel.Licensing.ECDsaSignature" /> class.
            </summary>
            <example>
                <code source="Examples\ECDsaSignature.Constructor1.cs" language="cs" />
                <code source="Examples\ECDsaSignature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.#ctor(Babel.Licensing.ECDsaKeySize)">
            <summary>
                 Create a new instance of <see cref="T:Babel.Licensing.ECDsaSignature" /> class with 
                 the given <see cref="T:Babel.Licensing.ECDsaKeySize" />.
             </summary>
            <param name="keySize">  A value indicating the bit size of the key. </param>
            <example>
                <code source="Examples\ECDsaSignature.Constructor2.cs" language="cs" />
                <code source="Examples\ECDsaSignature.Constructor2.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.ECDsaSignature.AlgorithmName">
            <summary>
                 Gets the name of the sign algorithm.
             </summary>
            <value>
                 The name of the sign algorithm.
             </value>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.CreateKeyPair">
            <summary>
                Creates a new key pair.
            </summary>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.SignData(System.Byte[])">
            <summary>
                 Generate the signature for the given data.
             </summary>
            <param name="data"> The data to sign. </param>
            <returns>
                 Returns the generated signature.
             </returns>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.VerifyData(System.Byte[],System.Byte[])">
            <summary>
                 Verify data.
             </summary>
            <param name="data">         The data. </param>
            <param name="signature">    The signature. </param>
            <returns>
                <c>true</c> if the signature is valid, <c>false</c> if is not valid.
             </returns>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.WritePem(System.String,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="path">             The file path. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="M:Babel.Licensing.ECDsaSignature.WritePem(System.IO.Stream,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified stream.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="stream">           The stream to write. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="T:Babel.Licensing.IRSAKeys">
            <summary>
                Interface for signature providers based on RSA algorithm.
            </summary>
            <example>
                <code source="Examples\RSASignature.Constructor1.cs" language="cs" />
                <code source="Examples\RSASignature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.IRSAKeys.HasPublicKey">
            <summary>
                 Gets a value indicating whether this object has public key.
             </summary>
            <value>
                 true if this object has public key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.IRSAKeys.HasPrivateKey">
            <summary>
                 Gets a value indicating whether this object has private key.
             </summary>
            <value>
                 true if this object has private key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.IRSAKeys.KeyPair">
            <summary>
                 Gets or sets the RSA key pair.
             </summary>
            <value>
                 The RSA key pair.
             </value>
        </member>
        <member name="T:Babel.Licensing.RSASignature">
            <summary>
                Creates and verifies digital signature using RSA-SH1 algorithm.
                This class cannot be inherited.
            </summary>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
            <seealso cref="T:Babel.Licensing.XmlDigitalSignature" />
        </member>
        <member name="P:Babel.Licensing.RSASignature.KeySize">
            <summary>
                 Gets or sets the RSA key size.
             </summary>
            <value>
                 The size of the RSA key.
             </value>
        </member>
        <member name="P:Babel.Licensing.RSASignature.GenerateKeyInfo">
            <summary>
                 Gets or sets a value indicating whether the generate key information.
             </summary>
            <value>
                 true if generate key information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.RSASignature.HasPublicKey">
            <summary>
                 Gets a value indicating whether this object has public key.
             </summary>
            <value>
                 true if this object has public key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.RSASignature.HasPrivateKey">
            <summary>
                 Gets a value indicating whether this object has private key.
             </summary>
            <value>
                 true if this object has private key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.RSASignature.KeyPair">
            <summary>
                 Gets or sets the RSA key pair.
             </summary>
            <value>
                 The RSA key pair.
             </value>
        </member>
        <member name="M:Babel.Licensing.RSASignature.FromKeys(System.String)">
            <summary>
                 Creates an <see cref="T:Babel.Licensing.RSASignature" /> object from the given public and private keys.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="rsaKey">    The encoded string RSA key. </param>
            <returns>
                 An instance of RSASignature.
             </returns>
            <seealso cref="T:Babel.Licensing.RSASignature" />
            <example>
                <code source="Examples\RSASignature.Constructor2.cs" language="cs" />
                <code source="Examples\RSASignature.Constructor2.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.RSASignature.FromStrongNamePublicKey(System.Byte[])">
            <summary>
                 Creates an <see cref="T:Babel.Licensing.RSASignature" /> object from the given strong name public key buffer.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="publicKey">    The strong name assembly public key. </param>
            <returns>
                 An instance of RSASignature.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RSASignature.#ctor(System.Security.Cryptography.RSA)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.RSASignature" /> class with the specified RSA algorithm.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the rsa argument is null.
             </exception>
            <param name="rsa"> The RSA algorithm. </param>
        </member>
        <member name="M:Babel.Licensing.RSASignature.#ctor(System.Security.Cryptography.RSA,System.Boolean)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.RSASignature" />
                 class with the specified RSA algorithm and a flag which specify to whether to add 
                 public key information to the signature.
             </summary>
            <param name="rsa">              The RSA algorithm. </param>
            <param name="generateKeyInfo">  true to add public key information to signature element, false if not. </param>
            <remarks>
             If the public key information is not added to the signature, the RSA public key must be provided before calling the  
             method VerifyData. 
             </remarks>
        </member>
        <member name="M:Babel.Licensing.RSASignature.#ctor(System.Int32)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.RSASignature" /> class with the specified RSA key size.
             </summary>
            <param name="keySize">  Size of the RSA key. </param>
            <example>
                <code source="Examples\RSASignature.Constructor2.cs" language="cs" />
                <code source="Examples\RSASignature.Constructor2.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.RSASignature.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.RSASignature" /> class.
            </summary>
            <example>
                <code source="Examples\RSASignature.Constructor1.cs" language="cs" />
                <code source="Examples\RSASignature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.RSASignature.AlgorithmName">
            <summary>
                 Gets the name of the sign algorithm.
             </summary>
            <value>
                 The name of the sign algorithm.
             </value>
        </member>
        <member name="M:Babel.Licensing.RSASignature.CreateKeyPair">
            <summary>
                Creates a new key pair.
            </summary>
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="M:Babel.Licensing.RSASignature.SignData(System.Byte[])">
            <summary>
                 Generate the signature for the given data.
             </summary>
            <param name="data"> The data to sign. </param>
            <returns>
                 Returns the generated signature.
             </returns>
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="M:Babel.Licensing.RSASignature.VerifyData(System.Byte[],System.Byte[])">
            <summary>
                 Verify the signature of a given data buffer.
             </summary>
            <param name="data">         The data to verify. </param>
            <param name="signature">    The signature buffer. </param>
            <returns>
                <c>true</c> if the signature is valid, <c>false</c> if is not valid.
             </returns>
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="M:Babel.Licensing.RSASignature.WritePem(System.String,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="path">             The file path. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
            <example>
                <code source="Examples\RSASignature.WritePem.cs" language="cs" />
                <code source="Examples\RSASignature.WritePem.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.RSASignature.WritePem(System.IO.Stream,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified stream.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="stream">           The stream to write. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="M:Babel.Licensing.RSASignature.ToXmlDigitalSignature">
            <summary>
                 Converts this object to an <see cref="T:Babel.Licensing.XmlDigitalSignature" /> object.
             </summary>
            <returns>
                 The <see cref="T:Babel.Licensing.XmlDigitalSignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RSASignature.ExportKeys(System.Boolean)">
            <summary>
                 Export RSA keys as base 64 encoded string.
             </summary>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
            <returns>
                 The base 64 encoded RSA key.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RSASignature.ImportKeys(System.String)">
            <summary>
                 Import RSA keys.
             </summary>
            <exception cref="T:System.ArgumentNullException">        Thrown when one or more required arguments are null. </exception>
            <exception cref="T:System.InvalidOperationException">    Thrown when the requested operation is invalid. </exception>
            <param name="rsaKey">   The base64 encoded string RSA key. </param>
        </member>
        <member name="M:Babel.Licensing.RSASignature.ImportRSA(System.Security.Cryptography.RSA)">
            <summary>
                 Import RSA keys.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="rsa">  The RSA algorithm. </param>
        </member>
        <member name="M:Babel.Licensing.RSASignature.ToRSA">
            <summary>
                 Converts this object to a <see cref="T:System.Security.Cryptography.RSA" />.
             </summary>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when the requested operation is invalid.
             </exception>
            <returns>
                 This object as a RSA.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RSASignature.CreateFromKeyFile(System.String,System.Security.SecureString)">
            <summary>
                 Creates an instance of <see cref="T:Babel.Licensing.RSASignature" /> from the specified key pair file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the keyFile argument is null.
             </exception>
            <param name="keyFile">  The key pair file path. This can be an SNK or PFX file. </param>
            <param name="password"> (Optional) the key password. </param>
            <returns>
                 The created <see cref="T:Babel.Licensing.RSASignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RSASignature.CreateFromKeyContainer(System.String)">
            <summary>
                 Creates an instance of <see cref="T:Babel.Licensing.RSASignature" /> from the specified key container.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the container argument is null.
             </exception>
            <param name="container">    The key container name. </param>
            <returns>
                 The created <see cref="T:Babel.Licensing.RSASignature" /> object.
             </returns>
        </member>
        <member name="T:Babel.Licensing.XmlDigitalSignature">
            <summary>
                Provides a means to read and validate and digitally sign XML documents.
            </summary>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.RSA">
            <summary>
                 Gets or sets the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.
             </summary>
            <value>
                 The <see cref="T:System.Security.Cryptography.RSA" /> algorithm.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.GenerateKeyInfo">
            <summary>
                 Gets or sets a value indicating whether the generate key information.
             </summary>
            <value>
                 true if generate key information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.SignatureValue">
            <summary>
                 Gets the signature value.
             </summary>
            <value>
                 The signature value.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.#ctor(System.Security.Cryptography.RSA)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.XmlDigitalSignature" /> class with the specified RSA algorithm.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the rsa argument is null.
             </exception>
            <param name="rsa"> The RSA algorithm. </param>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.#ctor(System.Security.Cryptography.RSA,System.Boolean)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.XmlDigitalSignature" />
                 class with the specified RSA algorithm.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="rsa">              The RSA algorithm. </param>
            <param name="generateKeyInfo">  true to add public key information to signature element, false if not. </param>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.AlgorithmName">
            <summary>
                 Gets the name of the sign algorithm.
             </summary>
            <value>
                 The name of the sign algorithm.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.Babel#Licensing#ISignatureProvider#SignData(System.Byte[])">
            <summary>
                 Generate the signature for the given data.
             </summary>
            <param name="data"> The data to sign. </param>
            <returns>
                 Returns the generated signature.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.Babel#Licensing#ISignatureProvider#VerifyData(System.Byte[],System.Byte[])">
            <summary>
                 Verify the signature of a given data buffer.
             </summary>
            <param name="data">         The data to verify. </param>
            <param name="signature">    The signature buffer. </param>
            <returns>
                <c>true</c> if the signature is valid, <c>false</c> if is not valid.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.WritePem(System.String,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="path">             The file path. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.WritePem(System.IO.Stream,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified stream.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="stream">           The stream to write. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.HasPublicKey">
            <summary>
                 Gets a value indicating whether this object has public key.
             </summary>
            <value>
                 true if this object has public key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.HasPrivateKey">
            <summary>
                 Gets a value indicating whether this object has private key.
             </summary>
            <value>
                 true if this object has private key, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlDigitalSignature.KeyPair">
            <summary>
                 Gets or sets the RSA key pair.
             </summary>
            <value>
                 The RSA key pair.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.CreateFromSignedXml(System.String)">
            <summary>
                 Creates an <see cref="T:Babel.Licensing.XmlDigitalSignature" /> object from the digitally signed XML document.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when the XML is not digitally signed.
             </exception>
            <param name="xml">  The digitally signed XML document. </param>
            <returns>
                 The created <see cref="T:Babel.Licensing.XmlDigitalSignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.CreateFromKeyFile(System.String,System.Security.SecureString)">
            <summary>
                 Creates an instance of <see cref="T:Babel.Licensing.XmlDigitalSignature" /> from the specified key pair file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the keyFile argument is null.
             </exception>
            <param name="keyFile">  The key pair file path. This can be an SNK or PFX file. </param>
            <param name="password"> (Optional) the key password. </param>
            <returns>
                 The created <see cref="T:Babel.Licensing.XmlDigitalSignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.CreateFromKeyContainer(System.String)">
            <summary>
                 Creates an instance of <see cref="T:Babel.Licensing.RSASignature" /> from the specified key container.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the container argument is null.
             </exception>
            <param name="container">    The key container name. </param>
            <returns>
                 The created <see cref="T:Babel.Licensing.RSASignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.ToRSASignature">
            <summary>
                 Converts this object to an <see cref="T:Babel.Licensing.RSASignature" /> object.
             </summary>
            <returns>
                 The <see cref="T:Babel.Licensing.RSASignature" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.LoadXml(System.String)">
            <summary>
                 Loads an XML file to sign.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="xml">  The XML document. </param>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.Sign">
            <summary>
                Sign the XML.
            </summary>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.VerifySignature">
            <summary>
                 Verify the XML digital signature.
             </summary>
            <returns>
                 true if the signature is valid, false if not.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlDigitalSignature.WriteXml(System.Xml.XmlWriter)">
            <summary>
                 Writes the XML to the specified <see cref="T:System.Xml.XmlWriter" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="writer">   The XML writer. </param>
        </member>
        <member name="T:Babel.Licensing.HexEncoding">
            <summary>
                Converts between binary data and an hex-encoded string.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Babel.Licensing.HexEncoding.TryDecode(System.String,System.Byte[]@)">
            <summary>
                 Attempts to decode from the given data.
             </summary>
            <param name="encoded">  The encoded string. </param>
            <param name="buffer">   [out] The buffer. </param>
            <returns>
                 true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:Babel.Licensing.HexEncoding.Decode(System.String)">
            <summary>
                 Decodes the given hex string to its byte representation.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="encoded">  The encoded string. </param>
            <returns>
                 The decoded string buffer.
             </returns>
            <example>
                <code source="Examples\HexEncoding.cs" language="cs" />
                <code source="Examples\HexEncoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.HexEncoding.Encode(System.Byte[])">
            <summary>
                 Encodes the given buffer to an hex string.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="buffer">   The buffer. </param>
            <returns>
                 The encoded hex string.
             </returns>
            <example>
                <code source="Examples\HexEncoding.cs" language="cs" />
                <code source="Examples\HexEncoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.HexEncoding.IsValidChar(System.Char)">
            <summary>
                 Query if the given character is a valid hex character.
             </summary>
            <param name="value">   The input character. </param>
            <returns>
                 true if valid character, false if not.
             </returns>
        </member>
        <member name="T:Babel.Licensing.FileLicenseProvider">
            <summary>
                Represents an license provider used to manage licenses stored in a file on disk. 
            </summary>
        </member>
        <member name="P:Babel.Licensing.FileLicenseProvider.SearchDirectories">
            <summary>
                 Gets or sets the directories where to search for a license file.
             </summary>
            <value>
                 The array of search directories.
             </value>
        </member>
        <member name="P:Babel.Licensing.FileLicenseProvider.LicenseFile">
            <summary>
                 Gets or sets the license file full path.
             </summary>
            <value>
                 The license file full path.
             </value>
        </member>
        <member name="P:Babel.Licensing.FileLicenseProvider.EnvironmentVariable">
            <summary>
                 Gets or sets the environment variable name that contains the license file path.
             </summary>
            <value>
                 The environment variable name.
             </value>
        </member>
        <member name="P:Babel.Licensing.FileLicenseProvider.LicenseFactory">
            <summary>
                 Gets or sets the <see cref="T:Babel.Licensing.ILicenseFactory" />.
             </summary>
            <value>
                 The license factory.
             </value>
        </member>
        <member name="M:Babel.Licensing.FileLicenseProvider.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.FileLicenseProvider" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.FileLicenseProvider.#ctor(Babel.Licensing.ILicenseFactory)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.FileLicenseProvider" />
                 class.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="factory">  The license factory. </param>
        </member>
        <member name="M:Babel.Licensing.FileLicenseProvider.GetLicense(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 When overridden in a derived class, gets a license for an instance or type of component, when given a context
                 and whether the denial of a license throws an exception.
             </summary>
            <param name="context">
                 A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                 A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance"> An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" />
                 .
             </returns>
        </member>
        <member name="M:Babel.Licensing.FileLicenseProvider.ValidateLicenseKey(System.String,Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the license key.
             </summary>
            <param name="licenseKey">   The license key. </param>
            <param name="context">
                  A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                  A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance">     An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ICreateCustomRestriction">
            <summary>
                Interface for create custom restriction.
            </summary>
        </member>
        <member name="E:Babel.Licensing.ICreateCustomRestriction.CreateCustomRestriction">
            <summary>
                Event queue for all listeners interested in CreateCustomRestriction events.
            </summary>
        </member>
        <member name="T:Babel.Licensing.ICreateCustomSignatureProvider">
            <summary>
                Interface for create custom signature provider.
            </summary>
        </member>
        <member name="E:Babel.Licensing.ICreateCustomSignatureProvider.CreateCustomSignatureProvider">
            <summary>
                Event queue for all listeners interested in CreateCustomSignatureProvider events.
            </summary>
        </member>
        <member name="T:Babel.Licensing.IdFormat">
            <summary>
                Values that represent various ID formats.
            </summary>
            <example>
                <code source="Examples\IdGenerator.cs" language="cs" />
                <code source="Examples\IdGenerator.vb" language="vbnet" />
            </example>
            <seealso cref="T:Babel.Licensing.IdGenerator"></seealso>
        </member>
        <member name="F:Babel.Licensing.IdFormat.Hex">
            <summary>
                Hexadecimal string format.
            </summary>
        </member>
        <member name="F:Babel.Licensing.IdFormat.Decimal">
            <summary>
                Decimal string format.
            </summary>
        </member>
        <member name="F:Babel.Licensing.IdFormat.Base32">
            <summary>
                Base 32 string format.
            </summary>
        </member>
        <member name="T:Babel.Licensing.IdGenerator">
            <summary>
                A license identifier generator. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.IdGenerator.Prefix">
            <summary>
                 Gets or sets the identifier prefix.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <value>
                 Returns the identifier prefix.
             </value>
        </member>
        <member name="P:Babel.Licensing.IdGenerator.Length">
            <summary>
                 Gets or sets the identifier length.
             </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when one or more arguments are outside the required range.
             </exception>
            <value>
                 The identifier length.
             </value>
        </member>
        <member name="P:Babel.Licensing.IdGenerator.Format">
            <summary>
                 Gets or sets the format to use.
             </summary>
            <value>
                 The format.
             </value>
        </member>
        <member name="M:Babel.Licensing.IdGenerator.#ctor(System.String,System.Int32)">
            <summary>
                 Generate a new instance of <see cref="T:Babel.Licensing.IdGenerator" /> class specifying 
                 the identifier prefix and length.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the prefix argument is null.
             </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when the length argument is less or equal to zero.
             </exception>
            <param name="prefix">   The identifier prefix. </param>
            <param name="length">   The total identifier string length. </param>
        </member>
        <member name="M:Babel.Licensing.IdGenerator.#ctor(System.String)">
            <summary>
                 Generate a new instance of <see cref="T:Babel.Licensing.IdGenerator" /> class specifying
                 the identifier prefix.
             </summary>
            <param name="prefix">   The identifier prefix. </param>
            <example>
                <code source="Examples\IdGenerator.Constructor1.cs" language="cs" />
                <code source="Examples\IdGenerator.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.IdGenerator.#ctor">
            <summary>
                Generate a new instance of <see cref="T:Babel.Licensing.IdGenerator" /> class.
            </summary>
            <example>
                <code source="Examples\IdGenerator.cs" language="cs" />
                <code source="Examples\IdGenerator.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.IdGenerator.Create(System.String,System.Int32)">
            <summary>
                 Creates a new identifier string with given prefix.
             </summary>
            <param name="prefix">   The identifier prefix. </param>
            <param name="length">   The total identifier string length. </param>
            <returns>
                 A string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.IdGenerator.CreateId">
            <summary>
                 Creates the a new identifier string.
             </summary>
            <returns>
                 The new identifier.
             </returns>
        </member>
        <member name="T:Babel.Licensing.IEnvironmentInformation">
            <summary>
                Provides a mechanism for retrieving environment information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.IsVirtualEnvironment">
            <summary>
                 Gets a value indicating whether this object is running in a virtual environment.
             </summary>
            <value>
                 true if this object is virtual environment, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.VirtualEnvironment">
            <summary>
                 Gets the virtual environment name.
             </summary>
            <value>
                 The virtual environment name.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.IsSystemClockRollback">
            <summary>
                 Gets a value indicating whether the system clock was set back.
             </summary>
            <value>
                 true if the system clock was set back, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.InstanceCount">
            <summary>
                 Gets the application instance number.
             </summary>
            <value>
                 The application instance number.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.ApplicationName">
            <summary>
                 Gets the name of the application.
             </summary>
            <value>
                 The name of the application.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.ApplicationVersion">
            <summary>
                 Gets the application version.
             </summary>
            <value>
                 The version of the application.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.ProcessName">
            <summary>
                 Gets the name of the process.
             </summary>
            <value>
                 The name of the process.
             </value>
        </member>
        <member name="P:Babel.Licensing.IEnvironmentInformation.Is64BitProcess">
            <summary>
                 Whether the current process is a 64-bit process.
             </summary>
            <value>
                 true if the process is 64-bit; otherwise, false.
             </value>
        </member>
        <member name="M:Babel.Licensing.IEnvironmentInformation.GetLicenseUsageMode(Babel.Licensing.ILicenseContext)">
            <summary>
                 Gets license usage mode.
             </summary>
            <param name="context">  The license context. </param>
            <returns>
                 The license usage mode.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ILicenseBuilderProvider">
            <summary>
                Interface for license builder provider.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilderProvider.GetLicenseBuilder">
            <summary>
                 Gets an instance of an object that implements <see cref="T:Babel.Licensing.ILicenseBuilder" /> interfaces.
             </summary>
            <returns>
                 The license builder object.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ILicenseBuilderProvider`1">
            <summary>
                 Interface for license builder provider.
             </summary>
            <typeparam name="T"> Generic type parameter. </typeparam>
        </member>
        <member name="T:Babel.Licensing.ILicenseBuilder">
            <summary>
                Interface for license builder.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.Load(System.IO.Stream)">
            <summary>
                 Loads the license from the specified file.
             </summary>
            <param name="stream"> Specify the input stream. </param>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.Save(System.IO.Stream)">
            <summary>
                 Saves a copy of the license into the specified file.
             </summary>
            <param name="stream"> Specify the output stream. </param>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.AddOrUpdate(Babel.Licensing.ILicense)">
            <summary>
                 Adds a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 to the builder if the license does not already exists, or updates the <see cref="T:Babel.Licensing.ILicense" />
                 if the key already exists.
             </summary>
            <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object. </param>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.Remove(Babel.Licensing.ILicense)">
            <summary>
                 Removes a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 from the builder.
             </summary>
            <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object to be removed. </param>
            <returns>
                 true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.ToLicenses">
            <summary>
                 Converts the current builder state to a collection of <see cref="T:Babel.Licensing.ILicense" /> objects.
             </summary>
            <returns>
                 The current state as a collection of <see cref="T:Babel.Licensing.ILicense" /> objects.
             </returns>
        </member>
        <member name="P:Babel.Licensing.ILicenseBuilder.SignatureProvider">
            <summary>
                 Gets or sets the signature provider.
             </summary>
            <value>
                 The signature provider type <see cref="T:Babel.Licensing.ISignatureProvider" />.
             </value>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.Sign">
            <summary>
                Add a signature to the license object.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseBuilder.Validate">
            <summary>
                 Validates the license signature.
             </summary>
            <returns>
                 true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ContextSettings">
            <summary>
                Provides the class used to configure license validation.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ContextSettings.RefreshTime">
            <summary>
                 Gets or sets the refresh time after which the context is reloaded.
                 Is not set the license will be always reloaded.
             </summary>
            <value>
                 The refresh time or null.
             </value>
        </member>
        <member name="P:Babel.Licensing.ContextSettings.CheckSystemTimeRoollback">
            <summary>
                 Gets or sets a value that indicates whether to check that 
                 the system clock has been set back.
             </summary>
            <value>
                 true if we want to check that the system clock has been set back, false if not.
             </value>
        </member>
        <member name="T:Babel.Licensing.ILicenseContext">
            <summary>
                Interface for license context.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ILicenseContext.ContextName">
            <summary>
                 Gets the name of the context.
             </summary>
            <value>
                 The name of the context.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicenseContext.FallbackContext">
            <summary>
                 Gets or sets a context for the fallback.
             </summary>
            <value>
                 The fallback context.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicenseContext.Settings">
            <summary>
                 Gets or sets license context options.
             </summary>
            <value>
                 The license context settings.
             </value>
        </member>
        <member name="M:Babel.Licensing.ILicenseContext.LoadLicenseKey(System.Type)">
            <summary>
                 Loads license key.
             </summary>
            <param name="type"> The type. </param>
            <returns>
                 The license key.
             </returns>
        </member>
        <member name="M:Babel.Licensing.ILicenseContext.SaveLicenseKey(System.Type,System.String)">
            <summary>
                 Saves a license key.
             </summary>
            <param name="type"> The type. </param>
            <param name="key">  The key. </param>
        </member>
        <member name="T:Babel.Licensing.ILicenseProvider">
            <summary>
                Interface for license providers.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseProvider.GetLicense(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Gets a license for an instance or type of component.
             </summary>
            <param name="context">  A <see cref="T:Babel.Licensing.ILicenseContext" /> that specifies where you can use the licensed object. </param>
            <param name="type">     A <see cref="T:System.Type" /> that represents the component requesting the license. </param>
            <param name="instance"> An object that is requesting the license. </param>
            <returns>
                 A valid license.
             </returns>
        </member>
        <member name="T:Babel.Licensing.INetworkInformation">
            <summary>
                Provides a mechanism for retrieving network information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.INetworkInformation.NetworkDomains">
            <summary>
                 Gets the network domains.
             </summary>
            <value>
                 The network domains.
             </value>
        </member>
        <member name="P:Babel.Licensing.INetworkInformation.NetworkIPs">
            <summary>
                 Gets the network IP addresses.
             </summary>
            <value>
                 The network IPs.
             </value>
        </member>
        <member name="T:Babel.Licensing.IObjectListener">
            <summary>
                Interface for trackable listener.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IObjectListener.Update(Babel.Licensing.IObservableObject,System.Object[])">
            <summary>
                 Updates this object.
             </summary>
            <param name="trackable">    The trackable. </param>
            <param name="args">         A variable-length parameters list containing arguments. </param>
        </member>
        <member name="T:Babel.Licensing.IObservableObject">
            <summary>
                Interface for tracable object.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IObservableObject.Attach(Babel.Licensing.IObjectListener)">
            <summary>
                 Attaches the given listener.
             </summary>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.IObservableObject.Detach(Babel.Licensing.IObjectListener)">
            <summary>
                 Detaches the given listener.
             </summary>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.IObservableObject.Notify(System.Object[])">
            <summary>
                 Notifies registered listeners.
             </summary>
            <param name="args"> A variable-length parameters list containing arguments. </param>
        </member>
        <member name="T:Babel.Licensing.IReadableLicenseString">
            <summary>
                Interface for readable license strings.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IReadableLicenseString.ToReadableString(System.String)">
            <summary>
                 Converts the license object to a readable string.
             </summary>
            <param name="format">   Describes the format to use. </param>
            <returns>
                 The license as a string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.IReadableLicenseString.Parse(System.String)">
            <summary>
                 Parse the specified license string.
             </summary>
            <param name="license">  The license string. </param>
        </member>
        <member name="T:Babel.Licensing.IRestrictionFactory">
            <summary>
                Interface for restriction factory.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IRestrictionFactory.CreateRestriction(System.String)">
            <summary>
                 Creates a restriction.
             </summary>
            <param name="type"> The restriction type name. </param>
            <returns>
                 The new restriction.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ISignatureProviderFactory">
            <summary>
                Interface for signature provider factory.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ISignatureProviderFactory.CreateSignatureProvider(System.String)">
            <summary>
                 Creates signature provider.
             </summary>
            <param name="name"> The algorithm name. </param>
            <returns>
                 The new signature provider.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ILicenseFactory">
            <summary>
                Interface for license factory.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseFactory.CreateFeature(System.String)">
            <summary>
                 Creates a license feature.
             </summary>
            <param name="name"> The feature name. </param>
            <returns>
                 The new feature.
             </returns>
        </member>
        <member name="M:Babel.Licensing.ILicenseFactory.CreateField(System.String)">
            <summary>
                 Creates a license field.
             </summary>
            <param name="name"> The field name. </param>
            <returns>
                 The new field.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ISignatureKeyInfo">
            <summary>
                Interface for signature key information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ISignatureKeyInfo.GenerateKeyInfo">
            <summary>
                 Gets or sets a value indicating whether to generate key information in the signature.
             </summary>
            <value>
                 true if generate key information, false if not.
             </value>
        </member>
        <member name="T:Babel.Licensing.ISignatureProvider">
            <summary>
                Interface for signature providers.
            </summary>
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
            <seealso cref="T:Babel.Licensing.RSASignature" />
            <seealso cref="T:Babel.Licensing.XmlDigitalSignature" />
        </member>
        <member name="P:Babel.Licensing.ISignatureProvider.AlgorithmName">
            <summary>
                 Gets the name of the sign algorithm.
             </summary>
            <value>
                 The name of the sign algorithm.
             </value>
        </member>
        <member name="M:Babel.Licensing.ISignatureProvider.SignData(System.Byte[])">
            <summary>
                 Generate the signature for the given data.
             </summary>
            <param name="data"> The data to sign. </param>
            <returns>
                 Returns the generated signature.
             </returns>
        </member>
        <member name="M:Babel.Licensing.ISignatureProvider.VerifyData(System.Byte[],System.Byte[])">
            <summary>
                 Verify the signature of a given data buffer.
             </summary>
            <param name="data">         The data to verify. </param>
            <param name="signature">    The signature buffer. </param>
            <returns>
                <c>true</c> if the signature is valid, <c>false</c> if is not valid.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ISignatureWriter">
            <summary>
                Interface for signature types that can be written to a stream.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ISignatureWriter.WritePem(System.IO.Stream,System.Boolean)">
            <summary>
                 Writes the signature using PEM format to the specified stream.
             </summary>
            <param name="stream">           The stream to write. </param>
            <param name="publicKeyOnly">    Whether to write only public key data. </param>
        </member>
        <member name="T:Babel.Licensing.ISystemInformation">
            <summary>
                Provides a mechanism for retrieving system information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.OperatingSystem">
            <summary>
                 Gets the operating system name.
             </summary>
            <value>
                 The operating system name.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.SystemName">
            <summary>
                 Gets the name of the system.
             </summary>
            <value>
                 The name of the system.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.SystemManufacturer">
            <summary>
                 Gets the system manufacturer.
             </summary>
            <value>
                 The system manufacturer.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.SystemProductName">
            <summary>
                 Gets the system product name.
             </summary>
            <value>
                 The system product name.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.TotalPhysicalMemory">
            <summary>
                 Gets the total physical memory.
             </summary>
            <value>
                 The total physical memory in bytes.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.CurrentMemoryUsage">
            <summary>
                 Gets the current memory usage.
             </summary>
            <value>
                 The current memory usage.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorCount">
            <summary>
                 Gets the number of physical processors.
             </summary>
            <value>
                 The number of processors.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.LogicalProcessorCount">
            <summary>
                 Gets the number of logical processors.
             </summary>
            <value>
                 The number of processors.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorId">
            <summary>
                 Gets the CPU identifier.
             </summary>
            <value>
                 The CPU identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorName">
            <summary>
                 Gets the CPU name.
             </summary>
            <value>
                 The CPU name.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorType">
            <summary>
                 Gets the CPU type.
             </summary>
            <value>
                 The CPU type.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorArchitecture">
            <summary>
                 Gets the CPU architecture.
             </summary>
            <value>
                 The CPU architecture.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.ProcessorFeatures">
            <summary>
                 Gets the available CPU features.
             </summary>
            <value>
                 The processor features.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.EthernetCards">
            <summary>
                 Gets the ethernet cards.
             </summary>
            <value>
                 The ethernet cards.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.DiskSerialNumbers">
            <summary>
                 Gets the disk serial numbers.
             </summary>
            <value>
                 The disk serial numbers.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.MotherboardSerialNumber">
            <summary>
                 Gets the motherboard serial number.
             </summary>
            <value>
                 The motherboard serial number.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.BiosSerialNumber">
            <summary>
                 Gets the BIOS serial number.
             </summary>
            <value>
                 The BIOS serial number.
             </value>
        </member>
        <member name="P:Babel.Licensing.ISystemInformation.DisplayProperties">
            <summary>
                 Gets the display properties.
             </summary>
            <value>
                 The display properties.
             </value>
        </member>
        <member name="T:Babel.Licensing.KeyHelpers">
            <summary>
                String license helpers.
            </summary>
        </member>
        <member name="M:Babel.Licensing.KeyHelpers.ToReadableKey(System.String,System.Int32)">
            <summary>
                 Split the license key in tokens separated by a '-' character to provide a more convenient and
                 human readable license string.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the key argument is null.
             </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when the tokenSize argument is a negative integer.
             </exception>
            <param name="key">          The license key. </param>
            <param name="tokenSize">    The length of each readable key token. </param>
            <returns>
                 The given key converted to human readable string.
             </returns>
            <example>
                <code language="cs">
                     // Returns XYZW5-RTJ3W-DA13M-8RCGY-OMX7Z
                     string readableKey = KeyHelpers.ToReadableKey("XYZW5RTJ3WDA13M8RCGYOMX7Z", 5);
                 </code>
                <code language="vbnet">
                     ' Returns XYZW5-RTJ3W-DA13M-8RCGY-OMX7Z
                     Dim readableKey As String = KeyHelpers.ToReadableKey("XYZW5RTJ3WDA13M8RCGYOMX7Z", 5)
                 </code>
            </example>
        </member>
        <member name="T:Babel.Licensing.Licenseable">
            <summary>
                Provides a set of static (Shared in Visual Basic) methods for objects that implement <see cref="T:Babel.Licensing.ILicense" />.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForAnyAssembly``1(``0)">
            <summary>
                 An extension method that is used to license all assemblies
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <typeparam name="T">    Generic type parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForAssembly``1(``0,System.Reflection.Assembly)">
            <summary>
                 An extension method that is used to partially fill the <see cref="T:Babel.Licensing.ILicense" />
                 objects with the information provided by the given <see cref="T:System.Reflection.Assembly" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic type parameter <see cref="T:Babel.Licensing.ILicense" />. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="assembly"> The assembly from which the license information are retrieved. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForAssembly``1(``0,System.String)">
            <summary>
                 An extension method that is used to partially fill the <see cref="T:Babel.Licensing.ILicense" />
                 objects with the information provided by the full assembly name.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic type parameter <see cref="T:Babel.Licensing.ILicense" />. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="fullName"> The assembly full name. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithId``1(``0,System.String)">
            <summary>
                 An extension method used to assign an Id to the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="id">       The string identifier. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithUniqueId``1(``0,System.String)">
            <summary>
                 An extension method that is used to assign a unique identifier to a license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="prefix">   An optional identifier prefix. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithType``1(``0,System.String)">
            <summary>
                 An extension method that is used to assign the license type.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic type parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="type">     The license type. </param>
            <returns>
                 A T.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.IssuedAt``1(``0,System.Nullable{System.DateTime})">
            <summary>
                 An extension method that is used to assign the license issue date.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">        Generic type parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="issueDate">    The issue date. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ExpiresAt``1(``0,System.Nullable{System.DateTime})">
            <summary>
                 An extension method that is used to assign an expiration date to the license object.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="expireDate">   The expire date. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.SupportExpiresAt``1(``0,System.Nullable{System.DateTime})">
            <summary>
                 An extension method that is used to assign the support expiration date to the license object.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="expireDate">   The support expire date. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.LicensedTo``1(``0,System.String,System.String,System.String,System.String,System.Byte[])">
            <summary>
                 An extension method that is used to fill licensee information.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">        Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="name">         The licensee name. </param>
            <param name="contactInfo">  Information describing the contact. </param>
            <param name="company">      The licensee company. </param>
            <param name="url">          An URL where to find licensee information. </param>
            <param name="data">         Custom licensee data. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForProduct``1(``0,System.String,System.String,System.String,System.String)">
            <summary>
                 An extension method that is used to provide information about the licensed product.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">        Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="name">         The product name. </param>
            <param name="version">      The product version. </param>
            <param name="description">  A description about the product. </param>
            <param name="url">          An URL where to find additional product information. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForAnyComponent``1(``0)">
            <summary>
                 An extension method used to license any component.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <typeparam name="T">    Generic type parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithComponents``1(``0,System.String[])">
            <summary>
                 An extension method used to add component information.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">        Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="components">   A variable-length parameters list containing the components. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithField``1(``0,System.String,System.String)">
            <summary>
                 An extension method that is used to add license fields.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when the field with the given name is already present in the collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="name">     The field name. </param>
            <param name="value">    The field value. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\Field.Constructor1.cs" language="cs" />
                <code source="Examples\Field.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithFields``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                 An extension method that is used to add a dictionary of fields.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when a field with a given name is already present in the field collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="fields">   The dictionary of license fields to add. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithFields``1(``0,Babel.Licensing.Field[])">
            <summary>
                 An extension method that is used to add several license fields.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when a field with a given name is already present in the field collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="fields">   The license fields to add. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\Field.Constructor1.cs" language="cs" />
                <code source="Examples\Field.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithFeature``1(``0,System.String,System.String,System.Byte[],System.Nullable{System.DateTime},System.Byte[])">
            <summary>
                 An extension method that add a feature to the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when the feature with the given name is already present in the features collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="name">         The feature name. </param>
            <param name="description">  A description about the feature. </param>
            <param name="data">         Custom feature data. </param>
            <param name="expires">      The feature expire date. </param>
            <param name="key">          The feature key. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\Feature.Constructor1.cs" language="cs" />
                <code source="Examples\Feature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithFeature``1(``0,Babel.Licensing.Feature)">
            <summary>
                 An extension method that add a feature to the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when the feature with the given name is already present in the features collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="feature">  The feature object to add. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithFeatures``1(``0,Babel.Licensing.Feature[])">
            <summary>
                 An extension method that is used to add several license <see cref="T:Babel.Licensing.Feature" /> objects.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when a feature with a given name is already present in the feature collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="features"> A variable-length parameters list containing <see cref="T:Babel.Licensing.Feature" /> objects. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithRestrictions``1(``0,Babel.Licensing.Restriction[])">
            <summary>
                 An extension method that is used to add several license 
                 <see cref="T:Babel.Licensing.Restriction" /> objects.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when a restriction with a given name is already present in the restriction collection.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="restrictions"> A variable-length parameters list containing <see cref="T:Babel.Licensing.Restriction" /> objects. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ForBetaTesters``1(``0,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
                 An extension method used to add a <see cref="T:Babel.Licensing.BetaRestriction" /> object to
                 the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">         Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">       The license to act on. </param>
            <param name="recentChanges"> Information about recent changes introduced with this beta release. </param>
            <param name="buildType">     The build type. </param>
            <param name="expires">       Defines a period after which this beta expires. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithTrialDays``1(``0,System.Nullable{System.Int32})">
            <summary>
                 Defines a trial license which can be used for a limited number of days.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when one or more arguments are outside the required range.
             </exception>
            <typeparam name="T">        Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="trialDays">    The number of trial days. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\TrialRestriction.cs" language="cs" />
                <code source="Examples\TrialRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithTrialRunTime``1(``0,System.Nullable{System.TimeSpan})">
            <summary>
                 Defines a trial license which can run for a limited time period.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="runTime">  The trial run time. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithMaximumRunningInstances``1(``0,System.Nullable{System.Int32})">
            <summary>
                 Defines a trial license that allow only given number of application instances running simultaneously.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when one or more arguments are outside the required range.
             </exception>
            <typeparam name="T">            Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">          The license to act on. </param>
            <param name="instanceCount">    Number of permitted instances. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithMaximumRunCount``1(``0,System.Nullable{System.Int32})">
            <summary>
                 Defines a trial license that allow the application to run only for given number of times.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when one or more arguments are outside the required range.
             </exception>
            <typeparam name="T">       Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">     The license to act on. </param>
            <param name="runCount">    The maximum number of times the application can run. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.WithHardwareKey``1(``0,System.String)">
            <summary>
                 An extension method used to add a <see cref="T:Babel.Licensing.HardwareRestriction" /> object to
                 the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">        Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">      The license to act on. </param>
            <param name="hardwareKey">  The hardware key. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\HardwareRestriction.cs" language="cs" />
                <code source="Examples\HardwareRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.UseOnlyAt``1(``0,System.String)">
            <summary>
                 An ILicense extension method used to add a <see cref="T:Babel.Licensing.UsageRestriction" /> object to
                 the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="usage">    The license usage mode. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.NotForVirtualEnvironment``1(``0)">
            <summary>
                 An ILicense extension method that is used to prevent the execution of the 
                 application in a virtual environment.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\UsageRestriction.cs" language="cs" />
                <code source="Examples\UsageRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.RestrictedToProcess``1(``0,System.String[])">
            <summary>
                 An ILicense extension method that is used to restrict the license usage to a list of process names.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <typeparam name="T">    Generic type parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="process">  A variable-length parameters list containing the process names. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\UsageRestriction.cs" language="cs" />
                <code source="Examples\UsageRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.CopyFrom``1(``0,``0)">
            <summary>
                 An ILicense extension method that copies ILicense objects.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <typeparam name="T">    Generic type parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="other">    Another instance to copy. </param>
            <returns>
                 The copied <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ToRestrictedDomain``1(``0,System.String,System.String)">
            <summary>
                 An ILicense extension method used to add a <see cref="T:Babel.Licensing.DomainRestriction" /> object to
                 the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicense" /> parameter. </typeparam>
            <param name="license">  The license to act on. </param>
            <param name="domain">   The domain name. </param>
            <param name="role">     The server role. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
            <example>
                <code source="Examples\DomainRestriction.cs" language="cs" />
                <code source="Examples\DomainRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ToReadableString(Babel.Licensing.ILicenseBuilder,System.String)">
            <summary>
                 An ILicenseBuilder extension method that converts the current license to a readable string.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="builder">  The license builder to act on. </param>
            <param name="format">   (Optional) Describes the format to use. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.SignWith(Babel.Licensing.ILicense,Babel.Licensing.ISignatureProvider)">
            <summary>
                 An ILicense extension method that is used to sign the current license object with 
                 the given <see cref="T:Babel.Licensing.ISignatureProvider" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="license">      The license to act on. </param>
            <param name="signature">    The signature provider object. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
            <example>
                This example shows how to sign a license with an RSA signature.
                
                <code source="Examples\Licenseable.SignWith.cs" language="cs" /><code source="Examples\Licenseable.SignWith.vb" language="vbnet" /></example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.SignWithKeys(Babel.Licensing.ILicense,System.String,System.String)">
            <summary>
                 An ILicense extension method that is used to sign the current license object with
                 the given key pair.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="license">      The license to act on. </param>
            <param name="publicKey">    The public key. </param>
            <param name="privateKey">   The private key. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
            <example>
                <code source="Examples\StringLicense.Constructor.cs" language="cs" />
                <code source="Examples\StringLicense.Constructor.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ValidateWith(Babel.Licensing.ILicense,Babel.Licensing.ISignatureProvider)">
            <summary>
                 An ILicense extension method that validates the current license object with 
                 the given <see cref="T:Babel.Licensing.ISignatureProvider" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="license">      The license to act on. </param>
            <param name="signature">    The signature provider object. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ValidateWithPublicKey(Babel.Licensing.ILicense,System.String)">
            <summary>
                 An ILicense extension method that validates the current license object with
                 the given public key.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="license">      The license to act on. </param>
            <param name="publicKey">    The public key. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.Build(Babel.Licensing.ILicense)">
            <summary>
                 An extension method that converts the input license to a <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="license">  The license to act on. </param>
            <returns>
                 A <see cref="T:Babel.Licensing.ILicenseBuilder" /> that represents the input license object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.AddLicense``1(``0,Babel.Licensing.ILicense)">
            <summary>
                 An extension method that adds a license to the current license builder.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicenseBuilder" /> type parameter. </typeparam>
            <param name="builder">  The license builder to act on. </param>
            <param name="license">  The license to add. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
            <example>
                <code source="Examples\XmlLicense.AddLicense.vb" language="vbnet" />
                <code source="Examples\XmlLicense.AddLicense.cs" language="cs" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Licenseable.RemoveLicense``1(``0,Babel.Licensing.ILicense)">
            <summary>
                 An extension method that removes the given license object from the current license builder.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicenseBuilder" /> type parameter. </typeparam>
            <param name="builder">  The license builder to act on. </param>
            <param name="license">  The license to remove. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.SignWith(Babel.Licensing.ILicenseBuilder,Babel.Licensing.ISignatureProvider)">
            <summary>
                 An extension method used to sign the current license state with a given signature provider.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="builder">  The license builder to act on. </param>
            <param name="provider"> The signature provider. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.SignWithKeys(Babel.Licensing.ILicenseBuilder,System.String,System.String)">
            <summary>
                 An extension method used to sign the current license state with a given key pair.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="builder">      The license builder to act on. </param>
            <param name="publicKey">    The public key. </param>
            <param name="privateKey">   The private key. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.ValidateSignature(Babel.Licensing.ILicenseBuilder)">
            <summary>
                 An extension method that validates the current license signature.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have illegal values or when the signature is not valid.
             </exception>
            <param name="builder">  The license builder to act on. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.Load(Babel.Licensing.ILicenseBuilder,System.String)">
            <summary>
                 An extension method that loads the license from a given file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="builder">  The license builder to act on. </param>
            <param name="path">     The file to be read. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Licenseable.Save``1(``0,System.String)">
            <summary>
                 An extension method that saves the license to a file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <typeparam name="T">    Generic <see cref="T:Babel.Licensing.ILicenseBuilder" /> type parameter. </typeparam>
            <param name="builder">  The license builder to act on. </param>
            <param name="path">     The file to be saved. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.ILicenseBuilder" /> object.
             </returns>
            <example>
                <code source="Examples\XmlLicense.Save.vb" language="vbnet" />
                <code source="Examples\XmlLicense.Save.cs" language="cs" />
            </example>
        </member>
        <member name="T:Babel.Licensing.ILicenseServiceProvider">
            <summary>
                Interface for license service provider.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseServiceProvider.GetService(System.Type)">
            <summary>
                 Gets a service.
             </summary>
            <param name="serviceType">  Type of the service. </param>
            <returns>
                 The service instance.
             </returns>
        </member>
        <member name="T:Babel.Licensing.LicenseServices">
            <summary>
                Provides a way to register and obtain a list of services to support licensing.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseServices.Current">
            <summary>
                The LicenseServices singleton.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseServices.LicenseContext">
            <summary>
                 Gets or sets a license context.
             </summary>
            <value>
                 The license context.
             </value>
        </member>
        <member name="M:Babel.Licensing.LicenseServices.#ctor">
            <summary>
                Constructor that prevents a default instance of this class from being created.
            </summary>
        </member>
        <member name="M:Babel.Licensing.LicenseServices.AddService(System.Type,System.Object)">
            <summary>
                 Adds the specified service to the internal collection of services.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="serviceType">  The type of the service to add. </param>
            <param name="service">      The service object instance to add. </param>
        </member>
        <member name="M:Babel.Licensing.LicenseServices.GetService(System.Type)">
            <summary>
                 Gets type-based services from the license service provider.
             </summary>
            <param name="serviceType">  An object that specifies the type of service object to get. </param>
            <returns>
                 The requested service, or a null reference (Nothing in Visual Basic) if the service could not be located
             </returns>
            <remarks>
                 The return value of GetService must be cast to the interface type.
             </remarks>
        </member>
        <member name="T:Babel.Licensing.LicenseValidationResult">
            <summary>
                Encapsulates the result of a license validation.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseValidationResult.LicenseId">
            <summary>
                 Gets or sets the identifier of the license.
             </summary>
            <value>
                 The identifier of the license.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseValidationResult.Restriction">
            <summary>
                 Gets or sets the name of the restriction that generates this validation result.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseValidationResult.Exception">
            <summary>
                 Gets or sets the license validation exception.
             </summary>
            <value>
                 The license validation exception.
             </value>
        </member>
        <member name="M:Babel.Licensing.LicenseValidationResult.#ctor(System.String,System.Exception)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.LicenseValidationResult" /> class with a specified license ID.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="licenseId">    The license identifier. </param>
            <param name="exception">    The license validation exception. </param>
        </member>
        <member name="T:Babel.Licensing.Pem">
            <summary>
                An utility class to read PEM files.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Pem.ReadSignature(System.String)">
            <summary>
                 Creates a signature provider object from a PEF file.
             </summary>
            <param name="fileName"> The PEM file name. </param>
            <returns>
                 A signature provider object.
             </returns>
            <seealso cref="T:Babel.Licensing.ISignatureProvider" />
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="M:Babel.Licensing.Pem.ReadSignature(System.IO.Stream)">
            <summary>
                 Creates a signature provider object from a PEF stream.
             </summary>
            <param name="stream"> The PEM stream. </param>
            <returns>
                 A signature provider object.
             </returns>
            <seealso cref="T:Babel.Licensing.ISignatureProvider" />
            <seealso cref="T:Babel.Licensing.ECDsaSignature" />
            <seealso cref="T:Babel.Licensing.RSASignature" />
        </member>
        <member name="T:Babel.Licensing.RegistryLicenseProvider">
            <summary>
                Represents an license provider used to manage licenses stored in the Windows registry.
            </summary>
        </member>
        <member name="M:Babel.Licensing.RegistryLicenseProvider.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.RegistryLicenseProvider" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.RegistryLicenseProvider.GetLicense(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 When overridden in a derived class, gets a license for an instance or type of component, when given a context
                 and whether the denial of a license throws an exception.
             </summary>
            <param name="context">
                 A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                 A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance"> An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" />
                 .
             </returns>
        </member>
        <member name="M:Babel.Licensing.RegistryLicenseProvider.ValidateLicenseKey(System.String,Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the license key.
             </summary>
            <param name="licenseKey">   The license key. </param>
            <param name="context">
                  A <see cref="T:Babel.Licensing.ILicenseContext" />
                  that specifies where you can use the licensed object.
             </param>
            <param name="type">
                  A <see cref="T:System.Type" />
                  that represents the component requesting the license.
             </param>
            <param name="instance">     An object that is requesting the license. </param>
            <returns>
                 A valid <see cref="T:Babel.Licensing.ILicense" /> object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RegistryLicenseProvider.GetRegistryKey(System.Type,System.Object)">
            <summary>
                 Gets the license string stored into the registry key associated with the given type and object instance.
                 If not overridden, the license string is retrieved from the registry key built
                 using the information stored within the <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> and
                 <see cref="T:System.Reflection.AssemblyProductAttribute" /> attributes for the given type 
                 according the following rule:
                 HKEY_CURRENT_USER\SOFTWARE\AssmeblyCompanyAttribute\AssemblyProductAttribute\LicenseKey
             </summary>
            <param name="type">
                 A <see cref="T:System.Type" /> that represents the component requesting the license.
             </param>
            <param name="instance"> 
                 An object that is requesting the license. 
             </param>
            <returns>
                 The license registry key.
             </returns>
        </member>
        <member name="T:Babel.Licensing.AfterSendReportEventArgs">
            <summary>
                Additional information for after send report events.
            </summary>
        </member>
        <member name="P:Babel.Licensing.AfterSendReportEventArgs.Report">
            <summary>
                 Gets the report object.
             </summary>
            <value>
                 The report.
             </value>
        </member>
        <member name="P:Babel.Licensing.AfterSendReportEventArgs.Error">
            <summary>
                 Gets the error.
             </summary>
            <value>
                 The error.
             </value>
        </member>
        <member name="M:Babel.Licensing.AfterSendReportEventArgs.#ctor(Babel.Licensing.Report,System.Exception)">
            <summary>
                 Constructor.
             </summary>
            <param name="report">   The report. </param>
            <param name="error">    The error. </param>
        </member>
        <member name="T:Babel.Licensing.BabelReporting">
            <summary>
                A babel report service client. This class cannot be inherited.
            </summary>
            <example>
                <code source="Examples\BabelReporting.Configuration.cs" language="cs" />
                <code source="Examples\BabelReporting.Configuration.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.BabelReporting.Instance">
            <summary>
                 Gets the instance.
             </summary>
            <value>
                 The instance.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelReporting.Create(Babel.Licensing.BabelReportingConfiguration)">
            <summary>
                 Creates a new BabelReporting.
             </summary>
            <exception cref="T:System.InvalidOperationException">    Thrown when the requested operation is invalid. </exception>
            <param name="configuration">    The configuration. </param>
            <returns>
                 A BabelReporting.
             </returns>
        </member>
        <member name="E:Babel.Licensing.BabelReporting.BeforeSendReport">
            <summary>
                Event queue for all listeners interested in BeforeSendReport events.
            </summary>
        </member>
        <member name="E:Babel.Licensing.BabelReporting.AfterSendReport">
            <summary>
                Event queue for all listeners interested in AfterSendReport events.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelReporting.Configuration">
            <summary>
                 Gets the configuration.
             </summary>
            <value>
                 The configuration.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelReporting.#ctor(Babel.Licensing.BabelReportingConfiguration)">
            <summary>
                 Default constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="configuration">    The configuration. </param>
        </member>
        <member name="M:Babel.Licensing.BabelReporting.Send(Babel.Licensing.Report)">
            <summary>
                 Send this message.
             </summary>
            <param name="report">   The report. </param>
            <returns>
                 true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="T:Babel.Licensing.BabelReportingConfiguration">
            <summary>
                Represents configuration of the reporting service client.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BabelReportingConfiguration.ServiceUrl">
            <summary>
                 Gets or sets the URL for the service.
             </summary>
            <value>
                 The service URL.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelReportingConfiguration.ApiKey">
            <summary>
                 Gets or sets the reporting service API key.
             </summary>
            <value>
                 The reporting service API key.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelReportingConfiguration.ApiVersion">
            <summary>
                 Gets or sets the reporting service API version.
             </summary>
            <value>
                 The reporting service API version.
             </value>
        </member>
        <member name="P:Babel.Licensing.BabelReportingConfiguration.RetryCount">
            <summary>
                 Gets or sets the number times to retry submitting a report when a destination connection failure occurs.
             </summary>
            <value>
                 The number of retries.
             </value>
        </member>
        <member name="M:Babel.Licensing.BabelReportingConfiguration.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.BabelReportingExtensions">
            <summary>
                A babel reporting extensions.
            </summary>
        </member>
        <member name="M:Babel.Licensing.BabelReportingExtensions.ReportExceptions(Babel.Licensing.BabelReporting,System.Action{Babel.Licensing.ExceptionReportOptions})">
            <summary>
                 A BabelReporting extension method that configure exception reporting.
             </summary>
            <param name="self">             The self to act on. </param>
            <param name="configureOptions"> (Optional) Options for controlling the reporting configuration. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.BabelReporting" /> object.
             </returns>
            <example>
                <code source="Examples\ExceptionReport.Send.cs" language="cs" />
                <code source="Examples\ExceptionReport.Send.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelReportingExtensions.SendExceptionReport(Babel.Licensing.BabelReporting,System.Exception)">
            <summary>
                 A BabelReporting extension method that reports an exception.
             </summary>
            <param name="self"> The self to act on. </param>
            <param name="e">    The exception. </param>
            <returns>
                 True if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:Babel.Licensing.BabelReportingExtensions.ReportLicenseUsage(Babel.Licensing.BabelReporting,System.Action{Babel.Licensing.LicenseUsageReportOptions})">
            <summary>
                 A BabelReporting extension method that configure license usage reporting.
             </summary>
            <param name="self">             The self to act on. </param>
            <param name="configureOptions"> (Optional) Options for controlling the configure. </param>
            <returns>
                 The input <see cref="T:Babel.Licensing.BabelReporting" /> object.
             </returns>
            <example>
                <code source="Examples\LicenseUsageReport.Send.cs" language="cs" />
                <code source="Examples\LicenseUsageReport.Send.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.BabelReportingExtensions.SendLicenseUsageReport(Babel.Licensing.BabelReporting)">
            <summary>
                 A BabelReporting extension method that sends a license usage report.
             </summary>
            <param name="self"> The self to act on. </param>
            <returns>
                 True if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="T:Babel.Licensing.BeforeSendReportEventArgs">
            <summary>
                Additional information for before send report events.
            </summary>
        </member>
        <member name="P:Babel.Licensing.BeforeSendReportEventArgs.Report">
            <summary>
                 Gets the report.
             </summary>
            <value>
                 The report.
             </value>
        </member>
        <member name="P:Babel.Licensing.BeforeSendReportEventArgs.Cancel">
            <summary>
                 Gets or sets a value indicating whether to cancel report sending.
             </summary>
            <value>
                 true if cancel, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.BeforeSendReportEventArgs.#ctor(Babel.Licensing.Report)">
            <summary>
                 Constructor.
             </summary>
            <param name="report">   The report. </param>
        </member>
        <member name="T:Babel.Licensing.EnvironmentReportOptions">
            <summary>
                 Options for collecting environment information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectApplicationInformation">
            <summary>
                 Gets or sets a value indicating whether the collect application information.
             </summary>
            <value>
                 True if collect application information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectUserInformation">
            <summary>
                 Gets or sets a value indicating whether the collect user information.
             </summary>
            <value>
                 True if collect user information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectEnvironmentVariables">
            <summary>
                 Gets or sets a value indicating whether the collect environment variables.
             </summary>
            <value>
                 True if collect environment variables, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.EnvironmentVariables">
            <summary>
                 Gets or sets the environment variable list to collect.
                 If empty all environment variables are collected.
             </summary>
            <value>
                 The environment variables to collect.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectVirtualMachineInformation">
            <summary>
                 Gets or sets a value indicating whether the collect virtual machine information.
             </summary>
            <value>
                 True if collect virtual machine information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectLoadedAssemblies">
            <summary>
                 Gets or sets a value indicating whether the collect loaded assemblies.
             </summary>
            <value>
                 True if collect loaded assemblies, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.AssemblyNames">
            <summary>
                 Gets or sets the list of assembly names to collect.
             </summary>
            <value>
                 The assembly names to collect.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.CollectProcessInformation">
            <summary>
                 Gets or sets a value indicating whether to collect process information.
             </summary>
            <value>
                 True if collect process information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.EnvironmentReportOptions.ProcessNames">
            <summary>
                 Gets or sets the list of process names to collect.
             </summary>
            <value>
                 The process names to collect.
             </value>
        </member>
        <member name="M:Babel.Licensing.EnvironmentReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.SystemReportOptions">
            <summary>
                Options for collecting system information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectSystemInformation">
            <summary>
                 Gets or sets a value indicating whether the collect system information.
             </summary>
            <value>
                 True if collect system information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectOsInformation">
            <summary>
                 Gets or sets a value indicating whether the collect operating system information.
             </summary>
            <value>
                 True if collect operating system information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectProcessorInformation">
            <summary>
                 Gets or sets a value indicating whether the collect processor information.
             </summary>
            <value>
                 True if collect processor information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectDiskInformation">
            <summary>
                 Gets or sets a value indicating whether the collect disk information.
             </summary>
            <value>
                 True if collect disk information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectMemoryInformation">
            <summary>
                 Gets or sets a value indicating whether the collect memory information.
             </summary>
            <value>
                 True if collect memory information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectDisplayInformation">
            <summary>
                 Gets or sets a value indicating whether the collect display information.
             </summary>
            <value>
                 True if collect display information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.SystemReportOptions.CollectNetworkInformation">
            <summary>
                 Gets or sets a value indicating whether the collect network information.
             </summary>
            <value>
                 True if collect network information, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.SystemReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.NetworkReportOptions">
            <summary>
                Options for collecting network information.
            </summary>
        </member>
        <member name="P:Babel.Licensing.NetworkReportOptions.CollecAdapterInformation">
            <summary>
                 Gets or sets a value indicating whether the collec adapter information.
             </summary>
            <value>
                 True if collec adapter information, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.NetworkReportOptions.CollecDomainInformation">
            <summary>
                 Gets or sets a value indicating whether the collec domain information.
             </summary>
            <value>
                 True if collec domain information, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.NetworkReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.ExceptionReportOptions">
            <summary>
                Options class provides information needed to control exception report behavior.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ExceptionReportOptions.Environment">
            <summary>
                 Gets or sets the environment options.
             </summary>
            <value>
                 The environment.
             </value>
        </member>
        <member name="P:Babel.Licensing.ExceptionReportOptions.System">
            <summary>
                 Gets or sets the system options.
             </summary>
            <value>
                 The system.
             </value>
        </member>
        <member name="P:Babel.Licensing.ExceptionReportOptions.Network">
            <summary>
                 Gets or sets the network options.
             </summary>
            <value>
                 The network.
             </value>
        </member>
        <member name="P:Babel.Licensing.ExceptionReportOptions.EncryptionKey">
            <summary>
                 Gets or sets the report encryption key.
             </summary>
            <value>
                 The encryption key.
             </value>
        </member>
        <member name="P:Babel.Licensing.ExceptionReportOptions.EncryptionEncoding">
            <summary>
                 Gets or sets the encryption encoding. The default encoding is <see cref="T:Babel.Licensing.Base32Encoding" /></summary>
            <value>
                 The encryption encoding.
             </value>
        </member>
        <member name="P:Babel.Licensing.ExceptionReportOptions.Formatted">
            <summary>
                 Gets or sets a value indicating whether the report should be formatted.
             </summary>
            <value>
                 True if formatted, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.ExceptionReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.IReportSender">
            <summary>
                Interface for report sender.
            </summary>
        </member>
        <member name="E:Babel.Licensing.IReportSender.BeforeSendReport">
            <summary>
                Event queue for all listeners interested in BeforeSendReport events.
            </summary>
        </member>
        <member name="E:Babel.Licensing.IReportSender.AfterSendReport">
            <summary>
                Event queue for all listeners interested in AfterSendReport events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IReportSender.Send(Babel.Licensing.Report)">
            <summary>
                 Send a <see cref="T:Babel.Licensing.Report" />.
             </summary>
            <param name="report">   The report to send. </param>
            <returns>
                 True if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="T:Babel.Licensing.LicenseReportOptions">
            <summary>
                Options class provides information needed to control license usage report behavior.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseReportOptions.CollectFeaturesAccess">
            <summary>
                 Gets or sets a value indicating whether the collect features access.
             </summary>
            <value>
                 True if collect features access, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseReportOptions.CollectFieldsAccess">
            <summary>
                 Gets or sets a value indicating whether the collect fields access.
             </summary>
            <value>
                 True if collect fields access, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseReportOptions.CollectRestrictionsAccess">
            <summary>
                 Gets or sets a value indicating whether the collect restrictions access.
             </summary>
            <value>
                 True if collect restrictions access, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseReportOptions.CollectMembers">
            <summary>
                 Gets or sets the included members names.
             </summary>
            <value>
                 The include members names.
             </value>
        </member>
        <member name="M:Babel.Licensing.LicenseReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.LicenseUsageReportOptions">
            <summary>
                A report license usage options.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.License">
            <summary>
                 Gets or sets the license report options.
             </summary>
            <value>
                 The license.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.Environment">
            <summary>
                 Gets or sets the environment report options.
             </summary>
            <value>
                 The environment.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.System">
            <summary>
                 Gets or sets the system.
             </summary>
            <value>
                 The system.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.Network">
            <summary>
                 Gets or sets the network report options.
             </summary>
            <value>
                 The network.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.EncryptionKey">
            <summary>
                 Gets or sets the encryption key.
             </summary>
            <value>
                 The encryption key.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.EncryptionEncoding">
            <summary>
                 Gets or sets the encryption encoding. The default encoding is <see cref="T:Babel.Licensing.Base32Encoding" /></summary>
            <value>
                 The encryption encoding.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseUsageReportOptions.Formatted">
            <summary>
                 Gets or sets a value indicating whether the report should be formatted.
             </summary>
            <value>
                 True if formatted, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.LicenseUsageReportOptions.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="T:Babel.Licensing.Report">
            <summary>
                Represents the base class for any report object.
            </summary>
        </member>
        <member name="F:Babel.Licensing.Report.FormatVersion">
            <summary>
                Current Report version.
            </summary>
        </member>
        <member name="P:Babel.Licensing.Report.Properties">
            <summary>
                 Gets the report properties.
             </summary>
            <value>
                 The properties.
             </value>
        </member>
        <member name="P:Babel.Licensing.Report.Name">
            <summary>
                 Gets the report name.
             </summary>
            <value>
                 The report name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Report.Content">
            <summary>
                 Gets the report content.
             </summary>
            <value>
                 The report content.
             </value>
        </member>
        <member name="P:Babel.Licensing.Report.Date">
            <summary>
                 Gets or sets the report date.
             </summary>
            <value>
                 The report date.
             </value>
        </member>
        <member name="P:Babel.Licensing.Report.Version">
            <summary>
                 Gets the report version.
             </summary>
            <value>
                 The report version.
             </value>
        </member>
        <member name="P:Babel.Licensing.Report.Encrypted">
            <summary>
                 Gets a value indicating whether the report content is encrypted.
             </summary>
            <value>
                 True if this report content is encrypted, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.Report.#ctor(System.String)">
            <summary>
                 Initializes a new report instance with a given name.
             </summary>
            <param name="name"> The name. </param>
        </member>
        <member name="M:Babel.Licensing.Report.#ctor(System.String,System.String)">
            <summary>
                 Initializes a new report instance with a given report name and content.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="name">     The report name. </param>
            <param name="content">  The report content. </param>
        </member>
        <member name="M:Babel.Licensing.Report.Create(System.String,System.String)">
            <summary>
                 Creates a report from its string content.
             </summary>
            <exception cref="T:System.ArgumentNullException">        Thrown when one or more required arguments are null. </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <exception cref="T:System.InvalidOperationException">    Thrown when the requested operation is invalid. </exception>
            <param name="report">   The report content. </param>
            <param name="password"> (Optional) The password to decrypt report content. </param>
            <returns>
                 A Report object.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Report.Build">
            <summary>
                Builds this object.
            </summary>
        </member>
        <member name="T:Babel.Licensing.ValidationResult">
            <summary>
                Values that represent license restriction validation codes.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ValidationResult.Valid">
            <summary>
                Represents a valid restriction option.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ValidationResult.BadFormat">
            <summary>
                Represents a bad format restriction option.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ValidationResult.Expired">
            <summary>
                Represents a restriction that has the expire date passed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.ValidationResult.Invalid">
            <summary>
                Represents a restriction that has not passed the validation.
            </summary>
        </member>
        <member name="T:Babel.Licensing.Restriction">
            <summary>
                Defines a base class for a license restriction.
            </summary>
        </member>
        <member name="P:Babel.Licensing.Restriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Restriction.Listeners">
            <summary>
                 Gets the listeners.
             </summary>
            <value>
                 The listeners.
             </value>
        </member>
        <member name="P:Babel.Licensing.Restriction.Id">
            <summary>
                 Gets or sets the restriction identifier.
             </summary>
            <value>
                 The restriction identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.Restriction.ExpireDate">
            <summary>
                 Gets or sets the expire date after which the license is no longer valid.
             </summary>
            <value>
                 A <see cref="T:System.DateTime" /> expire date.
             </value>
        </member>
        <member name="M:Babel.Licensing.Restriction.#ctor">
            <summary>
                Default constructor for use only by derived class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Restriction.Validate(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the current restriction object.
             </summary>
            <param name="context">  The license context. </param>
            <param name="type">     The <see cref="T:System.Type" /> for which the restriction is validated. </param>
            <param name="instance"> The instance. </param>
            <returns>
                 The validation result code <see cref="T:Babel.Licensing.ValidationResult" />.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Restriction.Attach(Babel.Licensing.IObjectListener)">
            <summary>
                 Attaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Restriction.Detach(Babel.Licensing.IObjectListener)">
            <summary>
                 Detaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Restriction.Notify(System.Object[])">
            <summary>
                 Notifies registered listeners.
             </summary>
            <param name="args"> A variable-length parameters list containing arguments. </param>
        </member>
        <member name="T:Babel.Licensing.BetaRestriction">
            <summary>
                Defines a <see cref="T:Babel.Licensing.Restriction" /> typically used to tag 
                the license with beta release information. Setting an expire date for this restriction will allow
                to deliver software beta releases, valid for a limited time, before the delivery of the live release.
            </summary>
            <example>
                <code source="Examples\BetaRestriction.cs" language="cs" />
                <code source="Examples\BetaRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.BetaRestriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.BetaRestriction.BuildType">
            <summary>
                 Gets the type of the build for this beta release.
             </summary>
            <value>
                 A string representing the build type.
             </value>
        </member>
        <member name="P:Babel.Licensing.BetaRestriction.RecentChanges">
            <summary>
                 Gets this beta recent changes.
             </summary>
            <value>
                 A brief description of the changes introduced with this beta release.
             </value>
        </member>
        <member name="M:Babel.Licensing.BetaRestriction.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.BetaRestriction" /> class.
            </summary>
        </member>
        <member name="T:Babel.Licensing.DomainRestriction">
            <summary>
                Defines a <see cref="T:Babel.Licensing.Restriction" /> used to tie the license to a given network domain. 
            </summary>
            <example>
                <code source="Examples\DomainRestriction.cs" language="cs" />
                <code source="Examples\DomainRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.DomainRestriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.DomainRestriction.Domain">
            <summary>
                 Gets the network domain name.
             </summary>
            <value>
                 A string that represents the domain.
             </value>
        </member>
        <member name="P:Babel.Licensing.DomainRestriction.Role">
            <summary>
                 Gets the role associated to this domain.
             </summary>
            <value>
                 The domain role.
             </value>
        </member>
        <member name="M:Babel.Licensing.DomainRestriction.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.DomainRestriction" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.DomainRestriction.Validate(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the current domain license restriction.
             </summary>
            <param name="context">  The license context. </param>
            <param name="type">
                 The <see cref="T:System.Type" /> for which the restriction is validated.
             </param>
            <param name="instance"> The object instance for which the restriction is validated. </param>
            <returns>
                 The validation result code <see cref="T:Babel.Licensing.ValidationResult" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.HardwareRestriction">
            <summary>
                Defines an hardware <see cref="T:Babel.Licensing.Restriction" /> object.
                The hardware restriction tie the license to a particular hardware represented by a key string.
                This class cannot be inherited.
            </summary>
            <example>
                <code source="Examples\HardwareRestriction.cs" language="cs" />
                <code source="Examples\HardwareRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.HardwareRestriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.HardwareRestriction.HardwareKey">
            <summary>
                 Gets the hardware key.
             </summary>
            <value>
                 The hardware key.
             </value>
        </member>
        <member name="P:Babel.Licensing.HardwareRestriction.Data">
            <summary>
                 Gets additional hardware information.
             </summary>
            <value>
                 An array of bytes that contains additional hardware information.
             </value>
        </member>
        <member name="M:Babel.Licensing.HardwareRestriction.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.HardwareRestriction" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.HardwareRestriction.Validate(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the current hardware restriction.
             </summary>
            <param name="context">  The license context. </param>
            <param name="type">
                 The <see cref="T:System.Type" /> for which the restriction is validated.
             </param>
            <param name="instance"> The object instance for which the restriction is validated. </param>
            <returns>
                 The validation result code <see cref="T:Babel.Licensing.ValidationResult" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.TrialRestriction">
            <summary>
                Represents a <see cref="T:Babel.Licensing.Restriction" /> typically used to define trial licenses.
                The trial restriction can limit the number of days the license can be used, the number of application
                instances that can run simultaneously, the total number of executions and the running time.
            </summary>
            <example>
                <code source="Examples\TrialRestriction.cs" language="cs" />
                <code source="Examples\TrialRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.ExpireDays">
            <summary>
                 Gets the number of days after which the license expires.
             </summary>
            <value>
                 The number of trial days.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.RunInstances">
            <summary>
                 Gets or sets the number of the software instances that are allowed to run simultaneously.
             </summary>
            <value>
                 The number of allowed instances.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.RunCount">
            <summary>
                 Gets the number of runs after which the license expires.
             </summary>
            <value>
                 The total number of runs available for this license.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.RunCountLeft">
            <summary>
                 Gets the run count remaining before the license expires.
             </summary>
            <value>
                 The run count remaining.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.RunTime">
            <summary>
                 Gets the time that the software is allowed to run before the license expires.
             </summary>
            <value>
                 The run time.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.Terms">
            <summary>
                 Gets the license trial terms.
             </summary>
            <value>
                 The trial terms for this license.
             </value>
        </member>
        <member name="P:Babel.Licensing.TrialRestriction.TimeLeft">
            <summary>
                 Gets the time remaining before the license expires.
             </summary>
            <value>
                 The trial time remaining.
             </value>
        </member>
        <member name="M:Babel.Licensing.TrialRestriction.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.TrialRestriction" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.TrialRestriction.Validate(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the current trial license restriction.
             </summary>
            <param name="context">  The license context. </param>
            <param name="type">
                 The <see cref="T:System.Type" /> for which the restriction is validated.
             </param>
            <param name="instance"> The object instance for which the restriction is validated. </param>
            <returns>
                 The validation result code <see cref="T:Babel.Licensing.ValidationResult" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.UsageRestriction">
            <summary>
                An usage <see cref="T:Babel.Licensing.Restriction" /> is typically used to define environment license restrictions.
            </summary>
            <example>
                <code source="Examples\UsageRestriction.cs" language="cs" />
                <code source="Examples\UsageRestriction.vb" language="vbnet" />
            </example>
        </member>
        <member name="P:Babel.Licensing.UsageRestriction.Name">
            <summary>
                 Gets the restriction name.
             </summary>
            <value>
                 The restriction name.
             </value>
        </member>
        <member name="P:Babel.Licensing.UsageRestriction.Usage">
            <summary>
                 Gets or sets the license usage.
             </summary>
            <value>
                 The license usage.
             </value>
        </member>
        <member name="P:Babel.Licensing.UsageRestriction.ProcessList">
            <summary>
                 Gets or sets the name of the process.
             </summary>
            <value>
                 The name of the process.
             </value>
        </member>
        <member name="P:Babel.Licensing.UsageRestriction.CanRunInVirtualEnvironment">
            <summary>
                 Whether the use of the license is permitted inside a virtual machine or emulator.
             </summary>
            <value>
                 Null if the restriction is not defined, true if the license is valid inside a virtual environment, otherwise false.
             </value>
        </member>
        <member name="M:Babel.Licensing.UsageRestriction.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.UsageRestriction" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.UsageRestriction.Validate(Babel.Licensing.ILicenseContext,System.Type,System.Object)">
            <summary>
                 Validates the current license usage restriction object.
             </summary>
            <param name="context">  The license context. </param>
            <param name="type">
                 The <see cref="T:System.Type" /> for which the restriction is validated.
             </param>
            <param name="instance"> The instance. </param>
            <returns>
                 The validation result code <see cref="T:Babel.Licensing.ValidationResult" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.StringEncrypter">
            <summary>   A string encryptor class. </summary>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Encrypt(System.String,System.String)">
            <summary>   A string extension method that encrypts. </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <returns>   The encrypted string. </returns>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Encrypt(System.String,System.String,Babel.Licensing.IEncoding)">
            <summary>
                 A string extension method that encrypts strings.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <param name="encoding"> The encrypted string encoding. </param>
            <returns>
                 The encrypted string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Decrypt(System.String,System.String)">
            <summary>   A string extension method that decrypts. </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <returns>   The decrypted string. </returns>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Decrypt(System.String,System.String,Babel.Licensing.IEncoding)">
            <summary>
                 A string extension method that decrypts strings.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <param name="encoding"> The encrypted string encoding. </param>
            <returns>
                 The decrypted string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Encrypt(System.String,System.Byte[])">
            <summary>   A string extension method that encrypts. </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <returns>   The encrypted string. </returns>
        </member>
        <member name="M:Babel.Licensing.StringEncrypter.Decrypt(System.String,System.Byte[])">
            <summary>   A string extension method that decrypts. </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            <param name="self">     The string to act on. </param>
            <param name="password"> The password used to encrypt. </param>
            <returns>   The decrypted string. </returns>
        </member>
        <member name="T:Babel.Licensing.StringFormat">
            <summary>
                Values that represent license string formats.
            </summary>
        </member>
        <member name="F:Babel.Licensing.StringFormat.Base32">
            <summary>
                Represents the Base32 string format.
            </summary>
        </member>
        <member name="F:Babel.Licensing.StringFormat.Ascii">
            <summary>
                Represents the ASCII string format.
            </summary>
        </member>
        <member name="T:Babel.Licensing.SerialBuilder">
            <summary>
                This class is used to generate serial license strings.
                The generated serial is a relative short license string.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.SerialFormat">
            <summary>
                 Gets or sets the serial format <see cref="T:Babel.Licensing.StringFormat" />.
             </summary>
            <value>
                 The string format used to generate the serial.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.PrivateKey">
            <summary>
                 Gets or sets the private key used to sign the license.
                 The key represented by a Base32 encoded string.
             </summary>
            <value>
                 The private key Base32 encoded string.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.PublicKey">
            <summary>
                 Gets or sets the public key used to validate the license.
                 The key represented by a Base32 encoded string.
             </summary>
            <value>
                 The public key Base32 encoded string.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.LicenseId">
            <summary>
                 Gets or sets the license identifier.
             </summary>
            <value>
                 The identifier of the license.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.LicenseInfo">
            <summary>
                 Gets or sets general information stored into the license.
             </summary>
            <value>
                 Information stored into the license.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.ExpireDate">
            <summary>
                 Gets or sets the license expire date.
             </summary>
            <value>
                 The expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.ExpireDays">
            <summary>
                 Gets or sets the number of days after which the generated license expires.
             </summary>
            <value>
                 The number of expire days.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.RunInstances">
            <summary>
                 Gets or sets the number of application instances are allowed 
                 to run simultaneously for the generated license.
             </summary>
            <value>
                 The number of application instances are allowed
                 to run simultaneously.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.DomainName">
            <summary>
                 Gets or sets the name of the domain.
             </summary>
            <value>
                 The name of the domain.
             </value>
        </member>
        <member name="P:Babel.Licensing.SerialBuilder.HardwareKey">
            <summary>
                 Gets or sets the hardware key.
             </summary>
            <value>
                 The hardware key.
             </value>
        </member>
        <member name="M:Babel.Licensing.SerialBuilder.#ctor">
            <summary>
                Create a new instance of <see cref="T:Babel.Licensing.SerialBuilder" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.SerialBuilder.GenerateSerial(System.Int32)">
            <summary>
                 Generates a new serial.
             </summary>
            <param name="tokenLength"> (Optional) length of the tokens. </param>
            <returns>
                 The serial.
             </returns>
        </member>
        <member name="M:Babel.Licensing.SerialBuilder.IsValid(System.String)">
            <summary>
                 Query if 'serial' is valid.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the serial argument is null.
             </exception>
            <param name="serial"> The serial to validate. </param>
            <returns>
                <c>true</c> if the serial valid, <c>false</c> if is not valid.
             </returns>
        </member>
        <member name="M:Babel.Licensing.SerialBuilder.CreateKeyPair(Babel.Licensing.ECDsaKeySize)">
            <summary>
                 Creates key pair used to generate and validate a serial.
             </summary>
            <param name="keySize">  Size of the key. </param>
        </member>
        <member name="T:Babel.Licensing.SerialManager">
            <summary>
                This class is used to validate serials and get <see cref="T:Babel.Licensing.StringLicense" /> object from serials.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.SerialManager.PublicKey">
            <summary>
                 Gets or sets the public key used to validate serials.
             </summary>
            <value>
                 The public key as base 32 string.
             </value>
        </member>
        <member name="M:Babel.Licensing.SerialManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.SerialManager" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.SerialManager.IsValid(System.String)">
            <summary>
                 Query if the serial specified is valid.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the argument serial is null.
             </exception>
            <param name="serial">  The serial as base32 string. The serial can include '-' characters.</param>
            <returns>
                <c>true</c> if the serial is valid, otherwise <c>false</c>.
             </returns>
        </member>
        <member name="M:Babel.Licensing.SerialManager.Validate(System.String,System.Type,System.Object)">
            <summary>
                 Validates the given serial and returns a <see cref="T:Babel.Licensing.StringLicense" /> 
                 object if the serial is valid.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when a Babel License error condition occurs.
             </exception>
            <param name="serial">
                 The serial as base32 string. The serial can include '-' characters.
             </param>
            <param name="type">     The type. </param>
            <param name="instance"> The instance. </param>
            <returns>
                 A <see cref="T:Babel.Licensing.StringLicense" /> object if the serial is valid, otherwise 
                 it throws a <see cref="T:Babel.Licensing.BabelLicenseException" />.
             </returns>
        </member>
        <member name="T:Babel.Licensing.StringLicense">
            <summary>
                Defines a license object that can be retrieved from an encoded string. 
                This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Babel.Licensing.StringLicense.DefaultMaskSize">
            <summary>
                The default string license mask size used to randomize the generated string.
            </summary>
        </member>
        <member name="P:Babel.Licensing.StringLicense.LicenseKey">
            <summary>
                 Gets the license key granted to this component.
             </summary>
            <value>
                 A license key granted to this component.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Timestamp">
            <summary>
                 Gets the date/time when this object was created.
             </summary>
            <value>
                 This object timestamp.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.IsTrial">
            <summary>
                 Gets a value indicating whether this object represents a trial license.
             </summary>
            <value>
                 true if this objects contains a trial license, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.IsBeta">
            <summary>
                 Gets a value indicating whether this object represents a beta license.
             </summary>
            <value>
                 true if this is a beta license, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Id">
            <summary>
                 Gets the license identifier.
             </summary>
            <value>
                 The license identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.IssueDate">
            <summary>
                 Gets the license issue date.
             </summary>
            <value>
                 The license issue date.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.ExpireDate">
            <summary>
                 Gets the license expire date.
             </summary>
            <value>
                 The license expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.SupportExpireDate">
            <summary>
                 Gets the license support expire date.
             </summary>
            <value>
                 The license support expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Type">
            <summary>
                 Gets the license type.
             </summary>
            <value>
                 The license type.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Licensee">
            <summary>
                 Gets the <see cref="T:Babel.Licensing.Licensee" /> information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Licensee" /> object or a null reference
                 (Nothing in Visual Basic) if no licensee information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Product">
            <summary>
                 Gets the licensed product information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Product" /> object or a null reference
                 (Nothing in Visual Basic) if no product information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Assemblies">
            <summary>
                 Gets the collection of licensed assemblies full names.
             </summary>
            <value>
                 The licensed assemblies collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Components">
            <summary>
                 Gets the licensed components collection.
             </summary>
            <value>
                 The licensed components collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Features">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Feature" /> collection.
             </summary>
            <value>
                 The license feature collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Fields">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Field" /> collection.
             </summary>
            <value>
                 The license field collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicense.Restrictions">
            <summary>
                 Gets the collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </summary>
            <value>
                 The collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </value>
        </member>
        <member name="M:Babel.Licensing.StringLicense.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.StringLicense" /> class.
            </summary>
            <example>
                <code source="Examples\StringLicense.Constructor.cs" language="cs" />
                <code source="Examples\StringLicense.Constructor.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.StringLicense.Finalize">
            <summary>
                Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Babel.Licensing.StringLicense.Dispose">
            <summary>
                Disposes of the resources used by the license object.
            </summary>
        </member>
        <member name="T:Babel.Licensing.StringLicenseBuilder">
            <summary>
                This class is used to generate encoded license strings.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.StringLicenseBuilder.Format">
            <summary>
                 Gets or sets the <see cref="T:Babel.Licensing.StringFormat" /> used to generate the license.
             </summary>
            <value>
                 The license string format.
             </value>
        </member>
        <member name="E:Babel.Licensing.StringLicenseBuilder.CreateCustomRestriction">
            <summary>
                Event queue for all listeners interested in CreateCustomRestriction events.
            </summary>
        </member>
        <member name="E:Babel.Licensing.StringLicenseBuilder.CreateCustomSignatureProvider">
            <summary>
                Event queue for all listeners interested in CreateCustomSignatureProvider events.
            </summary>
            <example>
                This example shows how to implement a custom MD5 signature provider.
                <code source="Examples\CustomSignatureProvider.MD5Signature.cs" language="cs" /><code source="Examples\CustomSignatureProvider.MD5Signature.vb" language="vbnet" /></example>
            <example>
                The MD5 signature can be used to create and validate the license key.
                <code source="Examples\CustomSignatureProvider.MD5Signature.Validate.cs" language="cs" /><code source="Examples\CustomSignatureProvider.MD5Signature.Validate.vb" language="vbnet" /></example>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.#ctor">
            <summary>
                Create a new instance of <see cref="T:Babel.Licensing.StringLicenseBuilder" /> class.
            </summary>
            <example>
                <code source="Examples\StringLicenseBuilder.Constructor.vb" language="vbnet" />
                <code source="Examples\StringLicenseBuilder.Constructor.cs" language="cs" />
            </example>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.#ctor(Babel.Licensing.ISignatureProvider)">
            <summary>
                 Create a new instance of <see cref="T:Babel.Licensing.StringLicenseBuilder" /> class with the given
                 signature provider.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="signer">   The license signature provider <see cref="T:Babel.Licensing.ISignatureProvider" />. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.ToReadableString(System.String)">
            <summary>
                 Converts the current license state to a readable string.
             </summary>
            <param name="format">   Describes the format to use. </param>
            <returns>
                 The current license state as a string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.ToString(System.String)">
            <summary>
                 Returns an encoded license string according to the format specified.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown if the format parameter is null.
             </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when the format parameter specified is not valid.
             </exception>
            <param name="format">Describes the format to use. This can be ASCII or Base32.</param>
            <returns>
                 A string that represents the current license in the given format.
             </returns>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.ToString">
            <summary>
                 Returns an encoded string that represents the current license.
             </summary>
            <returns>
                 A string that represents the current license in the format specified for <see cref="T:Babel.Licensing.StringLicenseBuilder" />.
             </returns>
        </member>
        <member name="P:Babel.Licensing.StringLicenseBuilder.SignatureProvider">
            <summary>
                 Gets or sets the signature provider.
                 The signature provider is used to sign and verify the integrity of the license data.
             </summary>
            <value>
                 The signature provider type <see cref="T:Babel.Licensing.ISignatureProvider" />.
             </value>
            <example>
                <code>
                    StringLicenseBuilder builder = new StringLicenseBuilder();
                    builder.SignatureProvider = RSASignature.CreateFromKeyFile("KeyPair.snk");
                 </code>
            </example>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.ToLicenses">
            <summary>
                 Converts this object to a <see cref="T:Babel.Licensing.ILicense" /> object.
             </summary>
            <returns>
                 This object as a <see cref="T:Babel.Licensing.ILicense" />.
             </returns>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Load(System.IO.Stream)">
            <summary>
                 Loads the license from the specified file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the fileName argument is null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when the file contains bad data.
             </exception>
            <param name="stream"> Specify the input license stream. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Load(System.IO.TextReader)">
            <summary>
                 Loads the license from the given text reader.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the reader argument is null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when the <see cref="T:System.IO.TextReader" /> reads bad data.
             </exception>
            <param name="reader">   The <see cref="T:System.IO.TextReader" /> used to read the license. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Parse(System.String)">
            <summary>
                 Parse the input license string. If the string is not a valid encoded license string,
                 it throws a <see cref="T:Babel.Licensing.BabelLicenseException" />.
             </summary>
            <param name="license">  The encoded license string to parse. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Save(System.IO.Stream)">
            <summary>
                 Saves the current license state to the specified file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the fileName argument is null.
             </exception>
            <param name="stream"> The output license stream.
             </param>
            <example> 
                 This sample shows how to generate and save an encoded license string to a file.
                 <code>
                     StringLicense license = new StringLicense();
            
                     license.Id = IdGenerator.Create("lic", 5);
                     license.Product = new Product();
                     license.Product.Id = IdGenerator.Create("prd", 5);
            
                     // Create an encoded string license
                     StringLicenseBuilder builder = new StringLicenseBuilder();
                     builder.AddOrUpdate(license);
                     
                     // Save the license to memory
                     MemoryStream stream = new MemoryStream();
                     builder.Save(stream);
                 </code></example>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Save(System.IO.TextWriter)">
            <summary>
                 Saves the current license using the given <see cref="T:System.IO.TextWriter" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the writer argument is null.
             </exception>
            <param name="writer">   The <see cref="T:System.IO.TextWriter" /> object used to save the license. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.SetMaskSize(System.Int32)">
            <summary>
                 Sets the mask size used to randomize the generated license.
             </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                 Thrown when the size argument is a negative number.
             </exception>
            <param name="size"> The size represent the number of bytes used to randomize the license. </param>
            <example>
                <code>
                      StringLicenseBuilder builder = new StringLicenseBuilder();
                      
                      // Generates one of the possible 256 random licenses
                      string license = builder.ToString();
                 </code>
            </example>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.SetMask(System.Byte[])">
            <summary>
                 Sets the mask used to generate the license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="mask"> An array of bytes. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.AddOrUpdate(Babel.Licensing.ILicense)">
            <summary>
                 Adds a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 to the <see cref="T:Babel.Licensing.StringLicenseBuilder" /> if the license does not already exists, or updates the 
                 <see cref="T:Babel.Licensing.ILicense" /> if the key already exists.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the license argument is null.
             </exception>
            <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object. </param>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Remove(Babel.Licensing.ILicense)">
            <summary>
                 Removes a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 from the <see cref="T:Babel.Licensing.StringLicenseBuilder" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the license argument is null.
             </exception>
                     Remove
             <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object to be removed. </param><returns><c>true</c> if the license is successfully removed, <c>false</c> if it fails to remove the license.
             </returns></member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Sign">
            <summary>
                 Add a signature to the current license object.
             </summary>
            <exception cref="T:System.InvalidOperationException">
                 Thrown if there is the signature cannot be generated.
             </exception>
        </member>
        <member name="M:Babel.Licensing.StringLicenseBuilder.Validate">
            <summary>
                 Validates the current license signature.
                 This method doesn't validate license restrictions. 
                 Is not meant to be used to validate the license in client applications. 
                 To validate the license in client applications use the <see cref="T:Babel.Licensing.StringLicenseManager" /> class.
             </summary>
            <returns>
                 true if the signature id valid, false if the signature is not present or not valid.
             </returns>
        </member>
        <member name="T:Babel.Licensing.StringLicenseManager">
            <summary>
                This class is used to validate string licenses and get <see cref="T:Babel.Licensing.StringLicense" /> object from license string.
            </summary>
        </member>
        <member name="E:Babel.Licensing.StringLicenseManager.CreateCustomRestriction">
            <summary>
                Event queue for all listeners interested in CreateCustomRestriction events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.StringLicenseManager.OnCreateCustomRestriction(Babel.Licensing.CreateCustomRestrictionEventArgs)">
            <summary>
                 Raises the CreateCustomRestriction event.
             </summary>
            <param name="ea">   Event information to send to registered event handlers. </param>
        </member>
        <member name="E:Babel.Licensing.StringLicenseManager.CreateCustomSignatureProvider">
            <summary>
                Event queue for all listeners interested in CreateCustomSignatureProvider events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.StringLicenseManager.OnCreateCustomSignatureProvider(Babel.Licensing.CreateCustomSignatureProviderEventArgs)">
            <summary>
                 Raises the CreateCustomSignatureProvider event.
             </summary>
            <param name="ea">   Event information to send to registered event handlers. </param>
        </member>
        <member name="P:Babel.Licensing.StringLicenseManager.LicenseFactory">
            <summary>
                 Gets or sets the license factory.
             </summary>
            <value>
                 The license factory.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicenseManager.SignatureProvider">
            <summary>
                 Gets or sets the signature provider.
             </summary>
            <value>
                 The signature provider.
             </value>
        </member>
        <member name="P:Babel.Licensing.StringLicenseManager.CurrentContext">
            <summary>
                 Gets or sets the license context.
             </summary>
            <value>
                 The current context.
             </value>
        </member>
        <member name="M:Babel.Licensing.StringLicenseManager.IsValid(System.String,System.Type,System.Object)">
            <summary>
                 Determines whether the given string is a valid license.
             </summary>
            <param name="license">  The license string. </param>
            <param name="type">     The type associated with the license. </param>
            <param name="instance"> The object instance associated with the license. </param>
            <returns>
                 true if the given string license is valid; otherwise, false.
             </returns>
            <remarks>
             To successfully validate a license, the license must be signed and 
             the signature must carry enough information to reconstruct the <see cref="T:Babel.Licensing.ISignatureProvider" /> 
             object valid for validating signatures.
             For instance, if you have signed the license with an <see cref="T:Babel.Licensing.RSASignature" /> object, the 
             signature must include the public key. If the public key is not available inside the signature element, it will be
             extracted from the assembly strong name information. If the assembly is not signed and the public key is not embedded into
             the signature element the validation will fails. 
             For signature generated by the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider, the public key cannot be extracted from
             the assembly strong name as ECDsa signatures are not based on RSA algorithm used to strong name the assembly. 
             In this scenario the ECDsa signature must carry the public key information to validate the signature. 
             If the signature does not embed the public key information, you should provide the StringLicenseManager with an instance of  
             the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider generated from the ECDsa public key before calling 
             any validation method.
             To embed into the signature the key information required for the validation, the signature provider must implement
             the <see cref="T:Babel.Licensing.ISignatureKeyInfo" /> interface and the 
             <see cref="P:Babel.Licensing.ISignatureKeyInfo.GenerateKeyInfo" /> property must be set to true.
             </remarks>
        </member>
        <member name="M:Babel.Licensing.StringLicenseManager.Validate(System.String,System.Type,System.Object)">
            <summary>
                 Validates the string license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when a Babel License error condition occurs.
             </exception>
            <param name="licenseKey">  The string license string. </param>
            <param name="type"> The type associated with the license. </param>
            <param name="instance"> The object instance associated with the license. </param>
            <returns>
                 An <see cref="T:Babel.Licensing.StringLicense" /> object that has been validated.
             </returns>
            <remarks>
             To successfully validate a license, the license must be signed and 
             the signature must carry enough information to reconstruct the <see cref="T:Babel.Licensing.ISignatureProvider" /> 
             object valid for validating signatures.
             For instance, if you have signed the license with an <see cref="T:Babel.Licensing.RSASignature" /> object, the 
             signature must include the public key. If the public key is not available inside the signature element, it will be
             extracted from the assembly strong name information. If the assembly is not signed and the public key is not embedded into
             the signature element the validation will fails. 
             For signature generated by the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider, the public key cannot be extracted from
             the assembly strong name as ECDsa signatures are not based on RSA algorithm used to strong name the assembly. 
             In this scenario the ECDsa signature must carry the public key information to validate the signature. 
             If the signature does not embed the public key information, you should provide the StringLicenseManager with an instance of  
             the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider generated from the ECDsa public key before calling 
             any validation method.
             To embed into the signature the key information required for the validation, the signature provider must implement
             the <see cref="T:Babel.Licensing.ISignatureKeyInfo" /> interface and the 
             <see cref="P:Babel.Licensing.ISignatureKeyInfo.GenerateKeyInfo" /> property must be set to true.
             </remarks>
        </member>
        <member name="T:Babel.Licensing.XmlLicense">
            <summary>
                Defines a license object that can be retrieved from an XML document. 
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.LicenseKey">
            <summary>
                 Gets the license key granted to this component.
             </summary>
            <value>
                 A license key granted to this component.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Id">
            <summary>
                 Gets or sets the license identifier.
             </summary>
            <value>
                 The license identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Type">
            <summary>
                 Gets or sets the license type.
             </summary>
            <value>
                 The license type.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Timestamp">
            <summary>
                 Gets the license object creation time.
             </summary>
            <value>
                 The date and time the license object was instantiated.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.IssueDate">
            <summary>
                 Gets, sets the license issue date.
             </summary>
            <value>
                 The license issue date.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.ExpireDate">
            <summary>
                 Gets, sets the license expire date.
             </summary>
            <value>
                 The license expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.SupportExpireDate">
            <summary>
                 Gets, sets the license support expire date.
             </summary>
            <value>
                 The license support expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Licensee">
            <summary>
                 Gets, sets the <see cref="T:Babel.Licensing.Licensee" /> information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Licensee" /> object or a null reference
                 (Nothing in Visual Basic) if no licensee information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Product">
            <summary>
                 Gets, sets the licensed product information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Product" /> object or a null reference
                 (Nothing in Visual Basic) if no product information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Assemblies">
            <summary>
                 Gets the licensed assemblies collection.
             </summary>
            <value>
                 The licensed assemblies collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Components">
            <summary>
                 Gets the licensed components collection.
             </summary>
            <value>
                 The licensed components collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Features">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Feature" /> collection.
             </summary>
            <value>
                 The license feature collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Fields">
            <summary>
                 Gets the license <see cref="T:Babel.Licensing.Field" /> collection.
             </summary>
            <value>
                 The license field collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.Restrictions">
            <summary>
                 Gets the collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </summary>
            <value>
                 The collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.IsTrial">
            <summary>
                 Gets a value indicating whether this object is trial.
             </summary>
            <value>
                 true if this object is trial, false if not.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicense.IsBeta">
            <summary>
                 Gets a value indicating whether this object is beta.
             </summary>
            <value>
                 true if this object is beta, false if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlLicense.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.XmlLicense" /> class.
            </summary>
            <example>
                <code source="Examples\XmlLicense.Constructor.cs" language="cs" />
                <code source="Examples\XmlLicense.Constructor.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.XmlLicense.Finalize">
            <summary>
                Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Babel.Licensing.XmlLicense.Dispose">
            <summary>
                Disposes of the resources used by the license object.
            </summary>
        </member>
        <member name="T:Babel.Licensing.XmlLicenseBuilder">
            <summary>
                Provides a custom constructor and validation for XML licenses.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="E:Babel.Licensing.XmlLicenseBuilder.CreateCustomRestriction">
            <summary>
                Event queue for all listeners interested in CreateCustomRestriction events.
            </summary>
            <example>
                This code creates an XML license with a custom restriction.
                <code source="Examples\CustomRestriction.Create.cs" language="cs" /><code source="Examples\CustomRestriction.Create.vb" language="vbnet" /></example>
            <example>
                To validate a custom restriction, handle the CreateCustomRestriction event
                and create the proper restriction object.
                <code source="Examples\CustomRestriction.Validate.cs" language="cs" /><code source="Examples\CustomRestriction.Validate.vb" language="vbnet" /></example>
            <example>
                This is the implementation of a custom restriction that is able to validate the 
                machine minimum requirements in terms of available memory and total number of CPU present.
                <code source="Examples\CustomRestriction.MinimumRequirementsRestriction.cs" language="cs" /><code source="Examples\CustomRestriction.MinimumRequirementsRestriction.vb" language="vbnet" /></example>
        </member>
        <member name="E:Babel.Licensing.XmlLicenseBuilder.CreateCustomSignatureProvider">
            <summary>
                Event queue for all listeners interested in CreateCustomSignatureProvider events.
            </summary>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseBuilder.SignatureProvider">
            <summary>
                 Gets or sets the signature provider.
                 The signature provider is used to sign and verify the integrity of the license data.
             </summary>
            <value>
                 The signature provider type <see cref="T:Babel.Licensing.ISignatureProvider" />.
             </value>
            <example>
                <code>
                    XmlLicenseBuilder builder = new XmlLicenseBuilder();
                    builder.SignatureProvider = RSASignature.CreateFromKeyFile("KeyPair.snk");
                 </code>
            </example>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseBuilder.HasSignature">
            <summary>
                 Indicates whether the license has a signature.
             </summary>
            <value>
                <c>true</c> if this object has signature, <c>false</c> if not.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.#ctor(Babel.Licensing.ISignatureProvider)">
            <summary>
                 Create a new instance of <see cref="T:Babel.Licensing.XmlLicenseBuilder" /> class with the 
                 specified <see cref="T:Babel.Licensing.ISignatureProvider" /> signature provider.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="signer">   The <see cref="T:Babel.Licensing.ISignatureProvider" /> object used to digitally sign the license information.</param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.#ctor">
            <summary>
                Create a new instance of <see cref="T:Babel.Licensing.XmlLicenseBuilder" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.ToReadableString(System.String)">
            <summary>
                 Creates and returns a string representation of the current XML license.
             </summary>
            <param name="format">   Describes the format to use. </param>
            <remarks>
                 Available formats
                 B: Not formatted XML
             </remarks>
            <returns>
                 This XML license as a string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Parse(System.String)">
            <summary>
                 Parse the specified XML license string.
             </summary>
            <param name="license">  The XML license string. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.ToXml(System.Boolean)">
            <summary>
                 Converts this instance to an XML string.
             </summary>
            <param name="formatted"> Whether to format the XML output. </param>
            <returns>
                 The XML license string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.ToLicenses">
            <summary>
                 Converts this object to a <see cref="T:Babel.Licensing.ILicense" /> object.
             </summary>
            <returns>
                 This object as a <see cref="T:Babel.Licensing.ILicense" />.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.LoadXml(System.String)">
            <summary>
                 Loads the license from the specified XML document.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the xml argument is null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when the xml contains bad license data.
             </exception>
            <param name="xml"> The XML license document. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Load(System.IO.Stream)">
            <summary>
                 Loads the license from the specified stream.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the stream argument is null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when the stream contains bad data.
             </exception>
            <param name="stream"> Specify the stream where to load the license. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Load(System.String)">
            <summary>
                 Loads the license from the given file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="path"> The file name where to save the license. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Save(System.IO.Stream)">
            <summary>
                 Saves the current license state to the specified stream.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the stream argument is null.
             </exception>
            <param name="stream"> The stream where to write the license.
             </param>
            <example> 
                 This sample shows how to generate and save an XML license to a MemoryStream.
                 <code>
                     XmlLicense license = new XmlLicense();
            
                     license.Id = IdGenerator.Create("lic", 5);
                     license.Product = new Product();
                     license.Product.Id = IdGenerator.Create("prd", 5);
            
                     // Create and sign a license
                     XmlLicenseBuilder builder = new XmlLicenseBuilder();
                     builder.SignatureProvider = RSASignature.CreateFromKeyFile("KeyPair.snk");
                     builder.AddOrUpdate(license);
                     builder.Sign();
                     
                     // Save the license 
                     MemoryStream stream = new MemoryStream();
                     builder.Save(stream);
                 </code></example>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Save(System.String)">
            <summary>
                 Saves the current license state to a given file.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <param name="path"> The file path where to save the license. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.AddOrUpdate(Babel.Licensing.ILicense)">
            <summary>
                 Adds a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 to the builder if the license does not already exists, or updates the <see cref="T:Babel.Licensing.ILicense" />
                 if the key already exists.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the license argument is null.
             </exception>
            <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object. </param>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Remove(Babel.Licensing.ILicense)">
            <summary>
                 Removes a <see cref="T:Babel.Licensing.ILicense" /> with a given key <see cref="P:Babel.Licensing.ILicense.Id" />
                 from the <see cref="T:Babel.Licensing.XmlLicenseBuilder" />.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the license argument is null.
             </exception>
            <param name="license"> The <see cref="T:Babel.Licensing.ILicense" /> object to be removed. </param>
            <returns>
                <c>true</c> if the license is successfully removed, <c>false</c> if it fails to remove the license.
             </returns>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Sign">
            <summary>
                 Add a signature to the current license object.
             </summary>
            <exception cref="T:System.InvalidOperationException">
                 Thrown when the signature cannot be generated.
             </exception>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseBuilder.Validate">
            <summary>
                Validates the current license signature.
                This method doesn't validate license restrictions. 
                Is not meant to be used to validate the license in client applications. 
                To validate the license in client applications use the <see cref="T:Babel.Licensing.XmlLicenseManager" /> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the signature cannot be validated.
            </exception>
            <returns>
                <c>true</c> if the signature id valid, <c>false</c> if the signature is not present or not valid.
            </returns>
        </member>
        <member name="T:Babel.Licensing.XmlLicenseManager">
            <summary>
                This class is used to validate XML license and get <see cref="T:Babel.Licensing.XmlLicense" /> object from XML.
            </summary>
        </member>
        <member name="E:Babel.Licensing.XmlLicenseManager.CreateCustomRestriction">
            <summary>
                Event queue for all listeners interested in CreateCustomRestriction events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseManager.OnCreateCustomRestriction(Babel.Licensing.CreateCustomRestrictionEventArgs)">
            <summary>
                 Raises the CreateCustomRestriction event.
             </summary>
            <param name="ea">   Event information to send to registered event handlers. </param>
        </member>
        <member name="E:Babel.Licensing.XmlLicenseManager.CreateCustomSignatureProvider">
            <summary>
                Event queue for all listeners interested in CreateCustomSignatureProvider events.
            </summary>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseManager.OnCreateCustomSignatureProvider(Babel.Licensing.CreateCustomSignatureProviderEventArgs)">
            <summary>
                 Raises the CreateCustomSignatureProvider event.
             </summary>
            <param name="ea">   Event information to send to registered event handlers. </param>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseManager.LicenseFactory">
            <summary>
                 Gets or sets the license factory.
             </summary>
            <value>
                 The license factory.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseManager.SignatureProvider">
            <summary>
                 Gets or sets the signature provider.
             </summary>
            <value>
                 The signature provider.
             </value>
        </member>
        <member name="P:Babel.Licensing.XmlLicenseManager.CurrentContext">
            <summary>
                 Gets or sets the license context.
             </summary>
            <value>
                 The current context.
             </value>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseManager.IsValid(System.String,System.Type,System.Object)">
            <summary>
                 Determines whether the given XML string is a valid license.
             </summary>
            <param name="xml">      The XML license string. </param>
            <param name="type">     The type associated with the license. </param>
            <param name="instance"> The object instance associated with the license. </param>
            <returns>
                 true if the given XML license is valid; otherwise, false.
             </returns>
            <remarks>
             To successfully validate a license, the license must be signed and 
             the signature must carry enough information to reconstruct the <see cref="T:Babel.Licensing.ISignatureProvider" /> 
             object valid for validating signatures.
             For instance, if you have signed the license with an <see cref="T:Babel.Licensing.RSASignature" /> object, the 
             signature must include the public key. If the public key is not available inside the signature element, it will be
             extracted from the assembly strong name information. If the assembly is not signed and the public key is not embedded into
             the signature element the validation will fails. 
             For signature generated by the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider, the public key cannot be extracted from
             the assembly strong name as ECDsa signatures are not based on RSA algorithm used to strong name the assembly. 
             In this scenario the ECDsa signature must carry the public key information to validate the signature. 
             If the signature does not embed the public key information, you should provide the XmlLicenseManager with an instance of  
             the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider generated from the ECDsa public key before calling 
             any validation method.
             To embed into the signature the key information required for the validation, the signature provider must implement
             the <see cref="T:Babel.Licensing.ISignatureKeyInfo" /> interface and the 
             <see cref="P:Babel.Licensing.ISignatureKeyInfo.GenerateKeyInfo" /> property must be set to true.
             </remarks>
        </member>
        <member name="M:Babel.Licensing.XmlLicenseManager.Validate(System.String,System.Type,System.Object)">
            <summary>
                 Validates the XML license.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when one or more required arguments are null.
             </exception>
            <exception cref="T:Babel.Licensing.BabelLicenseException">
                 Thrown when a Babel License error condition occurs.
             </exception>
            <param name="xml">  The XML license string. </param>
            <param name="type"> The type associated with the license. </param>
            <param name="instance"> The object instance associated with the license. </param>
            <returns>
                 An XmlLicense object that has been validated.
             </returns>
            <remarks>
             To successfully validate a license, the license must be signed and 
             the signature must carry enough information to reconstruct the <see cref="T:Babel.Licensing.ISignatureProvider" /> 
             object valid for validating signatures.
             For instance, if you have signed the license with an <see cref="T:Babel.Licensing.RSASignature" /> object, the 
             signature must include the public key. If the public key is not available inside the signature element, it will be
             extracted from the assembly strong name information. If the assembly is not signed and the public key is not embedded into
             the signature element the validation will fails. 
             For signature generated by the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider, the public key cannot be extracted from
             the assembly strong name as ECDsa signatures are not based on RSA algorithm used to strong name the assembly. 
             In this scenario the ECDsa signature must carry the public key information to validate the signature. 
             If the signature does not embed the public key information, you should provide the XmlLicenseManager with an instance of  
             the <see cref="T:Babel.Licensing.ECDsaSignature" /> provider generated from the ECDsa public key before calling 
             any validation method.
             To embed into the signature the key information required for the validation, the signature provider must implement
             the <see cref="T:Babel.Licensing.ISignatureKeyInfo" /> interface and the 
             <see cref="P:Babel.Licensing.ISignatureKeyInfo.GenerateKeyInfo" /> property must be set to true.
             </remarks>
        </member>
        <member name="T:Babel.Licensing.Ascii85Encoding">
            <summary>
            Converts between binary data and an Ascii85-encoded string.
            </summary>
            <remarks>See <a href="http://en.wikipedia.org/wiki/Ascii85">Ascii85 at Wikipedia</a>.</remarks>
        </member>
        <member name="M:Babel.Licensing.Ascii85Encoding.CanDecode(System.String)">
            <summary>
                 Determine if we can decode the given string.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="encoded">  The Ascii85 string. </param>
            <returns>
                 true if we can decode, false if not.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Ascii85Encoding.Encode(System.Byte[])">
            <summary>
            Encodes the specified byte array in Ascii85.
            </summary>
            <param name="bytes">The bytes to encode.</param>
            <returns>An Ascii85-encoded string representing the input byte array.</returns>
            <example>
                <code source="Examples\Ascii85Encoding.cs" language="cs" />
                <code source="Examples\Ascii85Encoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Ascii85Encoding.Decode(System.String)">
            <summary>
            Decodes the specified Ascii85 string into the corresponding byte array.
            </summary>
            <param name="encoded">The Ascii85 string.</param>
            <returns>The decoded byte array.</returns>
            <example>
                <code source="Examples\Ascii85Encoding.cs" language="cs" />
                <code source="Examples\Ascii85Encoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Ascii85Encoding.IsValidChar(System.Char)">
            <summary>
                 Query if the given character is a valid for encoding.
             </summary>
            <param name="value">   The input character. </param>
            <returns>
                 true if valid character, false if not.
             </returns>
            <example>
                <code source="Examples\Ascii85Encoding.IsValidChar.cs" language="cs" />
                <code source="Examples\Ascii85Encoding.IsValidChar.vb" language="vbnet" />
            </example>
        </member>
        <member name="T:Babel.Licensing.Base32Encoding">
            <summary>
                Converts between binary data and an base32-encoded string.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Base32Encoding.CanDecode(System.String)">
            <summary>
                 Determine if we can decode the given string.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="encoded">  The encoded string. </param>
            <returns>
                 true if we can decode, false if not.
             </returns>
        </member>
        <member name="M:Babel.Licensing.Base32Encoding.Encode(System.Byte[])">
            <summary>
                 Encodes the given buffer.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="bytes">    The buffer. </param>
            <returns>
                 The encoded string.
             </returns>
            <example>
                <code source="Examples\Base32Encoding.cs" language="cs" />
                <code source="Examples\Base32Encoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Base32Encoding.Decode(System.String)">
            <summary>
                 Decodes the given string to its byte representation.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="encoded">  The encoded string. </param>
            <returns>
                 The decoded string buffer.
             </returns>
            <example>
                <code source="Examples\Base32Encoding.cs" language="cs" />
                <code source="Examples\Base32Encoding.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Base32Encoding.IsValidChar(System.Char)">
            <summary>
                 Query if the given character is a valid for encoding.
             </summary>
            <param name="ch">   The input character. </param>
            <returns>
                 true if valid character, false if not.
             </returns>
            <example>
                <code source="Examples\Base32Encoding.IsValidChar.cs" language="cs" />
                <code source="Examples\Base32Encoding.IsValidChar.vb" language="vbnet" />
            </example>
        </member>
        <member name="T:Babel.Licensing.IEncoding">
            <summary>
                Defines a common interface for objects that can provide string encoding.
            </summary>
        </member>
        <member name="M:Babel.Licensing.IEncoding.Encode(System.Byte[])">
            <summary>
                 Encodes the given buffer.
             </summary>
            <param name="buffer">   The buffer. </param>
            <returns>
                 The encoded string.
             </returns>
        </member>
        <member name="M:Babel.Licensing.IEncoding.Decode(System.String)">
            <summary>
                 Decodes the given string to its byte representation.
             </summary>
            <param name="encoded">  The encoded string. </param>
            <returns>
                 The decoded string buffer.
             </returns>
        </member>
        <member name="M:Babel.Licensing.IEncoding.IsValidChar(System.Char)">
            <summary>
                 Query if the given character is a valid for encoding.
             </summary>
            <param name="value">   The input character. </param>
            <returns>
                 true if valid character, false if not.
             </returns>
        </member>
        <member name="T:Babel.Licensing.Feature">
            <summary>
                Represents a license feature. A feature is used typically to enable additional.  
            </summary>
        </member>
        <member name="P:Babel.Licensing.Feature.Listeners">
            <summary>
                 Gets the listeners.
             </summary>
            <value>
                 The listeners.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.Id">
            <summary>
                 Gets or sets the feature identifier.
             </summary>
            <value>
                 The feature identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.Name">
            <summary>
                 Gets or sets the feature name.
             </summary>
            <value>
                 The feature name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.Description">
            <summary>
                 Gets or sets the feature description.
             </summary>
            <value>
                 The feature description.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.ExpireDate">
            <summary>
                 Gets or sets the feature expire date.
             </summary>
            <value>
                 The feature expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.Data">
            <summary>
                 Gets or sets the data associated with this feature.
             </summary>
            <value>
                 An array of bytes that contains the data contained in this feature.
             </value>
        </member>
        <member name="P:Babel.Licensing.Feature.Key">
            <summary>
                 Gets or sets the feature key. This is an additional field used to store encrypt key information.
             </summary>
            <value>
                 The feature key.
             </value>
        </member>
        <member name="M:Babel.Licensing.Feature.#ctor">
            <summary>
                Specialised default constructor for use only by derived class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Feature.#ctor(System.String)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.Feature" /> class with a given feature name.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when the parameter name is null. </exception>
            <param name="name"> The feature name. </param>
            <example>
                <code source="Examples\Feature.Constructor1.cs" language="cs" />
                <code source="Examples\Feature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Feature.#ctor(System.String,System.Byte[])">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.Feature" />
                 class with a given feature name and data.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="name"> The feature name. </param>
            <param name="data"> An array of bytes that contains the data related to this feature. </param>
            <example>
                <code source="Examples\Feature.Constructor1.cs" language="cs" />
                <code source="Examples\Feature.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Feature.#ctor(Babel.Licensing.Feature)">
            <summary>
                 Copy constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when the parameter other to copy is null. </exception>
            <param name="other">    The Feature object to copy. </param>
        </member>
        <member name="M:Babel.Licensing.Feature.Attach(Babel.Licensing.IObjectListener)">
            <summary>
                 Attaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Feature.Detach(Babel.Licensing.IObjectListener)">
            <summary>
                 Detaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Feature.Notify(System.Object[])">
            <summary>
                 Notifies registered listeners.
             </summary>
            <param name="args"> A variable-length parameters list containing arguments. </param>
        </member>
        <member name="T:Babel.Licensing.Field">
            <summary>
                Represents a license field used to store key value pairs in a license.
            </summary>
        </member>
        <member name="P:Babel.Licensing.Field.Listeners">
            <summary>
                 Gets the listeners.
             </summary>
            <value>
                 The listeners.
             </value>
        </member>
        <member name="P:Babel.Licensing.Field.Id">
            <summary>
                 Gets or sets the field identifier.
             </summary>
            <value>
                 The field identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.Field.Name">
            <summary>
                 Gets or sets the field name.
             </summary>
            <value>
                 The field name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Field.Value">
            <summary>
                 Gets or sets the field value.
             </summary>
            <value>
                 The value stored into this field object.
             </value>
        </member>
        <member name="M:Babel.Licensing.Field.#ctor">
            <summary>
                Specialised default constructor for use only by derived class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Field.#ctor(System.String,System.String)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.Field" /> class with the given name and value.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="name">     The field name. </param>
            <param name="value">    The value stored into this field object. </param>
            <example>
                <code source="Examples\Field.Constructor1.cs" language="cs" />
                <code source="Examples\Field.Constructor1.vb" language="vbnet" />
            </example>
        </member>
        <member name="M:Babel.Licensing.Field.#ctor(System.String)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.Field" /> class with the given field name.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when the parameter name is null. </exception>
            <param name="name"> The field name. </param>
        </member>
        <member name="M:Babel.Licensing.Field.#ctor(Babel.Licensing.Field)">
            <summary>
                 Copy constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when the parameter other to copy is null. </exception>
            <param name="other">    The Field object to copy. </param>
        </member>
        <member name="M:Babel.Licensing.Field.Attach(Babel.Licensing.IObjectListener)">
            <summary>
                 Attaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Field.Detach(Babel.Licensing.IObjectListener)">
            <summary>
                 Detaches the given listener.
             </summary>
            <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are null. </exception>
            <param name="listener"> The listener. </param>
        </member>
        <member name="M:Babel.Licensing.Field.Notify(System.Object[])">
            <summary>
                 Notifies registered listeners.
             </summary>
            <param name="args"> A variable-length parameters list containing arguments. </param>
        </member>
        <member name="T:Babel.Licensing.HardwareComponents">
            <summary>
                A bitfield of flags for specifying hardware components.
            </summary>
            <seealso cref="T:Babel.Licensing.HardwareId"></seealso>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.Cpu">
            <summary>
                A binary constant representing the CPU flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.Ethernet">
            <summary>
                A binary constant representing the Ethernet cards flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.Disk">
            <summary>
                A binary constant representing the disk flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.Motherboard">
            <summary>
                A binary constant representing the Motherboard flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.Bios">
            <summary>
                A binary constant representing the BIOS flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.SystemName">
            <summary>
                A binary constant representing the system name flag.
            </summary>
        </member>
        <member name="F:Babel.Licensing.HardwareComponents.All">
            <summary>
                A binary constant representing all flag.
            </summary>
        </member>
        <member name="T:Babel.Licensing.HardwareId">
            <summary>
                A hardware identifier.
            </summary>
        </member>
        <member name="P:Babel.Licensing.HardwareId.Salt">
            <summary>
                 Gets or sets the seed used to generate the key.
             </summary>
            <value>
                 A value used to seed the generated key.
             </value>
        </member>
        <member name="P:Babel.Licensing.HardwareId.RequiredComponents">
            <summary>
                 Gets or sets the hardware components required to generate the hardware key identifier.
             </summary>
            <value>
                 The required hardware components.
             </value>
        </member>
        <member name="M:Babel.Licensing.HardwareId.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.HardwareId" /> class.
            </summary>
            <example> This example show how to generate an hardware key using the computer name.
            
                <code language="cs">
                    HardwareId hardwareId = new HardwareId();
                    string hardwareKey = hardwareId.ToMachineKey();
                </code><code language="vbnet">
                    Dim hardwareId As New HardwareId()
                    Dim hardwareKey As String = hardwareId.ToMachineKey()
                </code></example>
        </member>
        <member name="M:Babel.Licensing.HardwareId.#ctor(Babel.Licensing.HardwareComponents)">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.HardwareId" /> class
                 with the specified hardware components.
             </summary>
            <param name="components">   The hardware components used to generate the machine key. </param>
            <example> This example show how to generate an hardware key using the disk serial number 
                       and the Ethernet MAC address information.
             
                 <code language="cs">
                     HardwareId hardwareId = new HardwareId(HardwareComponents.Disk | HardwareComponents.Ethernet);
                     string hardwareKey = hardwareId.ToMachineKey();
                 </code><code language="vbnet">
                     Dim hardwareId As New HardwareId(HardwareComponents.Disk Or HardwareComponents.Ethernet)
                     Dim hardwareKey As String = hardwareId.ToMachineKey()
                 </code></example>
        </member>
        <member name="M:Babel.Licensing.HardwareId.#ctor(Babel.Licensing.HardwareComponents,System.Byte[])">
            <summary>
                 Initializes a new instance of the <see cref="T:Babel.Licensing.HardwareId" />
                 class with the specified hardware components and salt byte array to seed the key.
             </summary>
            <param name="components">   The hardware components used to generate the machine key. </param>
            <param name="salt">         A value used to seed the generated key. </param>
            <example> This example shows how to create an hardware key with two bytes random salt.
             
                <code source="Examples\HardwareId.Salt.cs" language="cs" /><code source="Examples\HardwareId.Salt.vb" language="vbnet" /></example>
        </member>
        <member name="M:Babel.Licensing.HardwareId.ToMachineKey(System.Int32)">
            <summary>
                 Converts this object to a machine key.
             </summary>
            <param name="tokenSize">    (Optional) Size of the readable token. </param>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <returns>
                 A string that represents the hardware components.
             </returns>
        </member>
        <member name="M:Babel.Licensing.HardwareId.IsValid(System.String)">
            <summary>
                 Query if 'key' is valid.
             </summary>
            <exception cref="T:System.ArgumentNullException">    
                 Thrown when one or more required arguments are null. </exception>
            <exception cref="T:System.ArgumentException">
                 Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            <param name="key">  The key. </param>
            <returns>
                 true if valid, false if not.
             </returns>
        </member>
        <member name="T:Babel.Licensing.ILicense">
            <summary>
                Defines a common interface for license objects.
            </summary>
        </member>
        <member name="P:Babel.Licensing.ILicense.Id">
            <summary>
                 Gets or sets the license identifier.
             </summary>
            <value>
                 The license identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Type">
            <summary>
                 Gets or sets the license type.
             </summary>
            <value>
                 The license type.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.LicenseKey">
            <summary>
                 Gets the license key.
             </summary>
            <value>
                 The license key.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.IssueDate">
            <summary>
                 Gets or sets the license issue date.
             </summary>
            <value>
                 The license issue date.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.ExpireDate">
            <summary>
                 Gets or sets the license expire date.
             </summary>
            <value>
                 The license expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.SupportExpireDate">
            <summary>
                 Gets or sets the license support expire date.
             </summary>
            <value>
                 The license support expire date.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Licensee">
            <summary>
                 Gets or sets the <see cref="T:Babel.Licensing.Licensee" /> information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Licensee" /> object or a null reference 
                 (Nothing in Visual Basic) if no licensee information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Product">
            <summary>
                 Gets or sets the licensed product information.
             </summary>
            <value>
                 An instance of a <see cref="T:Babel.Licensing.Product" /> object or a null reference 
                 (Nothing in Visual Basic) if no product information is available.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Assemblies">
            <summary>
                 Gets the collection of licensed assemblies full names.
             </summary>
            <value>
                 The licensed assemblies collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Components">
            <summary>
                 Gets the licensed components collection.
             </summary>
            <value>
                 The licensed components collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Features">
            <summary>
                 Gets the collection of license <see cref="T:Babel.Licensing.Feature" />.
             </summary>
            <value>
                 The <see cref="T:Babel.Licensing.Feature" /> collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Fields">
            <summary>
                 Gets the collection of license <see cref="T:Babel.Licensing.Field" />.
             </summary>
            <value>
                 The <see cref="T:Babel.Licensing.Field" /> collection.
             </value>
        </member>
        <member name="P:Babel.Licensing.ILicense.Restrictions">
            <summary>
                 Gets the collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </summary>
            <value>
                 The collection of <see cref="T:Babel.Licensing.Restriction" /> objects.
             </value>
        </member>
        <member name="T:Babel.Licensing.ILicenseSerializable">
            <summary>
                Defines a common interface for objects that can be serialized into licenses.
            </summary>
        </member>
        <member name="M:Babel.Licensing.ILicenseSerializable.Write(System.Object)">
            <summary>
                 Write the object to a license.
             </summary>
            <param name="context"> The context to which the object is serialized. </param>
        </member>
        <member name="M:Babel.Licensing.ILicenseSerializable.Read(System.Object)">
            <summary>
                 Read the object from a license.
             </summary>
            <param name="context"> The context from which the object is deserialized. </param>
        </member>
        <member name="T:Babel.Licensing.Licensee">
            <summary>
                Represents the licensee information associated with the license. 
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.Licensee.Id">
            <summary>
                 Gets or sets the licensee identifier.
             </summary>
            <value>
                 The licensee identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.Licensee.Company">
            <summary>
                 Gets or sets the licensee company.
             </summary>
            <value>
                 The licensee company.
             </value>
        </member>
        <member name="P:Babel.Licensing.Licensee.Url">
            <summary>
                 Gets or sets the URL information associated with the licensee.
                 This can be the licensee company URL.
             </summary>
            <value>
                 The licensee URL.
             </value>
        </member>
        <member name="P:Babel.Licensing.Licensee.Name">
            <summary>
                 Gets or sets the licensee name.
             </summary>
            <value>
                 The licensee name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Licensee.ContactInfo">
            <summary>
                Gets or sets licensee contact information.
            </summary>
            <value>
                Information describing the licensee contact.
            </value>
        </member>
        <member name="P:Babel.Licensing.Licensee.Data">
            <summary>
                 Gets or sets additional licensee data.
             </summary>
            <value>
                 An array of byte that represents licensee data.
             </value>
        </member>
        <member name="M:Babel.Licensing.Licensee.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Licensee.#ctor(Babel.Licensing.Licensee)">
            <summary>
                 Copy constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the parameter other to copy is null.
             </exception>
            <param name="other"> The Licensee object to copy. </param>
        </member>
        <member name="T:Babel.Licensing.LicenseRestrictionProvider">
            <summary>
                Defines a license restriction provider.
            </summary>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProvider.#ctor">
            <summary>
                Specialized default constructor for use only by derived class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProvider.GetLicenseRestriction(System.String,System.Type,System.Object)">
            <summary>
                 Gets license restriction.
             </summary>
            <param name="restriction">  The restriction. </param>
            <param name="type">         The type. </param>
            <param name="instance">     The instance. </param>
            <returns>
                 The license restriction.
             </returns>
        </member>
        <member name="T:Babel.Licensing.LicenseRestrictionProviderAttribute">
            <summary>
                Attribute for license restriction provider. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.LicenseRestrictionProviderAttribute.LicenseRestrictionProvider">
            <summary>
                 Gets the license restriction provider.
             </summary>
            <value>
                 The license restriction provider.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseRestrictionProviderAttribute.RestrictionProviderType">
            <summary>
                 Gets the type of the restriction provider.
             </summary>
            <value>
                 The type of the restriction provider.
             </value>
        </member>
        <member name="P:Babel.Licensing.LicenseRestrictionProviderAttribute.RestrictionProviderName">
            <summary>
                 Gets the name of the restriction provider.
             </summary>
            <value>
                 The name of the restriction provider.
             </value>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProviderAttribute.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProviderAttribute.#ctor(System.Type)">
            <summary>
                 Constructor.
             </summary>
            <param name="type"> The type. </param>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProviderAttribute.#ctor(System.String)">
            <summary>
                 Constructor.
             </summary>
            <param name="name"> The name. </param>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProviderAttribute.Equals(System.Object)">
            <summary>
                 Returns a value that indicates whether this instance is equal to a specified object.
             </summary>
            <param name="obj">
                 An <see cref="T:System.Object" /> to compare with this instance or null.
             </param>
            <returns>
                 true if <paramref name="obj" /> equals the type and value of this instance; otherwise,
                 false.
             </returns>
        </member>
        <member name="M:Babel.Licensing.LicenseRestrictionProviderAttribute.GetHashCode">
            <summary>
                 Returns the hash code for this instance.
             </summary>
            <returns>
                 A 32-bit signed integer hash code.
             </returns>
        </member>
        <member name="T:Babel.Licensing.LicenseStatus">
            <summary>
                Values that represent a license status.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.InternalError">
            <summary>
                Represents an internal error.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.TimeRollback">
            <summary>
                Occurs when the system clock was set back.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.LicenseExpired">
            <summary>
                Indicates that the license has expired.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.BadLicenseFormat">
            <summary>
                Indicates that the data representing the license have an invalid format.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.AssemblyNotSigned">
            <summary>
                This error occurs when the licensed assembly has not been digitally signed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.AssemblyNotLicensed">
            <summary>
                An error that occurs when it was not found any license for the assembly which has been validated.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.ComponentNotLicensed">
            <summary>
                An error that occurs when the component that has been validated is not licensed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.NoSignature">
            <summary>
                This error occurs when the license is not digitally signed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.NoPublicKey">
            <summary>
                An error that occurs when the public key information required to validate a license is not available.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.InvalidSignature">
            <summary>
                Represents a license with an invalid digital signature.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.BadRestrictionFormat">
            <summary>
                This error occurs for a license restriction with an invalid format.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.InvalidRestriction">
            <summary>
                This error occurs when the restriction validation is not passed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.RestrictionExpired">
            <summary>
                This error occurs when a license has a restriction with the expiry date that has passed.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.MultipleLicenseValidationErrors">
            <summary>
                This error occurs when a license has a multiple validation errors.
            </summary>
        </member>
        <member name="F:Babel.Licensing.LicenseStatus.Valid">
            <summary>
                Represents a license that has passed all the validations.
            </summary>
        </member>
        <member name="T:Babel.Licensing.Product">
            <summary>
                Represents the licensed product.
                This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Babel.Licensing.Product.Id">
            <summary>
                 Gets or sets the product identifier.
             </summary>
            <value>
                 The product identifier.
             </value>
        </member>
        <member name="P:Babel.Licensing.Product.Name">
            <summary>
                 Gets or sets the product name.
             </summary>
            <value>
                 The product name.
             </value>
        </member>
        <member name="P:Babel.Licensing.Product.Version">
            <summary>
                 Gets or sets the product version.
             </summary>
            <value>
                 The product version.
             </value>
        </member>
        <member name="P:Babel.Licensing.Product.Copyright">
            <summary>
                 Gets or sets product copyright.
             </summary>
            <value>
                 The product copyright.
             </value>
        </member>
        <member name="P:Babel.Licensing.Product.Url">
            <summary>
                 Gets or sets URL where to find product information.
             </summary>
            <value>
                 The URL that represents this product.
             </value>
        </member>
        <member name="P:Babel.Licensing.Product.Description">
            <summary>
                 Gets or sets the product description.
             </summary>
            <value>
                 The product description.
             </value>
        </member>
        <member name="M:Babel.Licensing.Product.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Babel.Licensing.Product.#ctor(Babel.Licensing.Product)">
            <summary>
                 Copy constructor.
             </summary>
            <exception cref="T:System.ArgumentNullException">
                 Thrown when the parameter other to copy is null.
             </exception>
            <param name="other">    The Product object to copy. </param>
        </member>
        <member name="T:Babel.Licensing.RegistryKeys">
            <summary>
                A class to manage license registry keys.
            </summary>
        </member>
        <member name="P:Babel.Licensing.RegistryKeys.Root">
            <summary>
                 Gets or sets the registry hive.
             </summary>
            <value>
                 The registry hive.
             </value>
        </member>
        <member name="M:Babel.Licensing.RegistryKeys.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Babel.Licensing.RegistryKeys" /> class.
            </summary>
        </member>
        <member name="M:Babel.Licensing.RegistryKeys.CreateLicenseKey(System.Reflection.Assembly,System.String)">
            <summary>
                 Creates a registry key for the specified assembly and license key.
             </summary>
            <param name="assmebly"> The assembly for which to create the registry key. </param>
            <param name="license">  The license string. </param>
        </member>
        <member name="M:Babel.Licensing.RegistryKeys.GetLicenseKey(System.Reflection.Assembly)">
            <summary>
                 Gets the license key for the specified assembly.
             </summary>
            <param name="assmebly"> The assembly for which to retrieve the license key. </param>
            <returns>
                 The license key.
             </returns>
        </member>
        <member name="M:Babel.Licensing.RegistryKeys.DeleteLicenseKey(System.Reflection.Assembly)">
            <summary>
                 Deletes the license key for the specified assembly.
             </summary>
            <param name="assmebly"> The assembly for which to delete the license key. </param>
        </member>
        <member name="M:Babel.Licensing.RegistryKeys.GetAssemblySubKey(System.Reflection.Assembly)">
            <summary>
                 Gets the registry sub key for the specified assembly.
             </summary>
            <param name="assembly">  The assembly for which to retrieve the license key. </param>
            <returns>
                 The assembly sub key.
             </returns>
        </member>
    </members>
</doc>