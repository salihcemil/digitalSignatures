using Babel.Licensing;
using System;
using System.IO;
using System.Text;
using System.Windows.Forms;

namespace KeyGen
{
    public partial class Form1 : Form
    {
        ECDsaSignature signer;
        public byte[] signature;
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            signer = new ECDsaSignature();  //creating signer object

            signer.CreateKeyPair(); //generating public-private key pair

            tb_privKey.Text = signer.PrivateKey;
            tb_pubKey.Text = signer.PublicKey;
            
        }

        private void button2_Click(object sender, EventArgs e)
        {
            if(signer == null || signer.PrivateKey == null || signer.PublicKey == null)
            {
                MessageBox.Show("Something went wrong, please generate new key pair and try to save again");
            }
            else
            {
                File.WriteAllText("c:\\keys\\privKey.txt", signer.PrivateKey);
                File.WriteAllText("c:\\keys\\pubKey.txt", signer.PublicKey);
            }
        }
        
        private void button_sign_Click(object sender, EventArgs e)
        {
            if (textBox_prover_message.Text == string.Empty || textBox_prover_privateKey.Text == string.Empty || textBox_prover_message.Text == string.Empty)
            {
                MessageBox.Show("Please check input parameters");
                return;
            }

            ///DATA SIGNING OPERATION-CLIENT SIDE Parameters needed: Private Key, Public Key, the Message(to sign)
            string message = textBox_prover_message.Text;   //string(message object) to sign
            string privateKey = textBox_prover_privateKey.Text;  //private key generated by KeyGen
            string publicKey = textBox_prover_PublicKey.Text;    //public key generated by KeyGen

            signer = ECDsaSignature.FromKeys(publicKey, privateKey);    //creating signer object with public and private key parameters
            byte[] byteMessage = Encoding.Default.GetBytes(message);    //converting the message object to byteArray to enable signing operation
            byte[] byteSignature = signer.SignData(byteMessage);    //signing operation with signer object
            signature = signer.SignData(byteMessage);
            string signatureStr = Encoding.Default.GetString(byteSignature);   //converting signature from byteArray to string

            textBox_prover_signature.Text = signatureStr;
            textBox_verifier_signature.Text = signatureStr;
        }

        private void button_validate_Click(object sender, EventArgs e)
        {
            if (textBox_Verifier_PublicKey.Text == string.Empty || textBox_Verifier_Message.Text == string.Empty || textBox_verifier_signature.Text == string.Empty)
            {
                MessageBox.Show("Please check input parameters");
                return;
            }

            ///DATA SIGNATURE VERIFICATION-SERVER SIDE Parameters needed: Public Key, The Signature, The Message
            string publicKey = textBox_Verifier_PublicKey.Text;
            string message = textBox_Verifier_Message.Text;
            byte[] byteMessage = Encoding.Default.GetBytes(message);
            byte[] byteSignature = signature;
            ECDsaSignature verifier = ECDsaSignature.FromKeys(publicKey);   //creating a verifier object
            bool result = verifier.VerifyData(byteMessage, byteSignature);  //result if the signature was created by true public key
            MessageBox.Show(result?"the signature is valid":"signature is invalid");
        }
    }
}
